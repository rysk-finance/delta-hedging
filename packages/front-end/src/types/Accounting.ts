/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type WithdrawalReceiptStruct = {
  epoch: BigNumberish;
  shares: BigNumberish;
};

export type WithdrawalReceiptStructOutput = [BigNumber, BigNumber] & {
  epoch: BigNumber;
  shares: BigNumber;
};

export type DepositReceiptStruct = {
  epoch: BigNumberish;
  amount: BigNumberish;
  unredeemedShares: BigNumberish;
};

export type DepositReceiptStructOutput = [BigNumber, BigNumber, BigNumber] & {
  epoch: BigNumber;
  amount: BigNumber;
  unredeemedShares: BigNumber;
};

export interface AccountingInterface extends utils.Interface {
  functions: {
    "amountForShares(uint256,uint256)": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "completeWithdraw(address,uint256)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "executeEpochCalculation(uint256,uint256,int256)": FunctionFragment;
    "initiateWithdraw(address,uint256)": FunctionFragment;
    "liquidityPool()": FunctionFragment;
    "redeem(address,uint256)": FunctionFragment;
    "sharesForAmount(uint256,uint256)": FunctionFragment;
    "strikeAsset()": FunctionFragment;
    "underlyingAsset()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "amountForShares",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "completeWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeEpochCalculation",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesForAmount",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "strikeAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "amountForShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "completeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeEpochCalculation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharesForAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strikeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Accounting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AccountingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountForShares(
      _shares: BigNumberish,
      _assetPerShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amount: BigNumber }>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    completeWithdraw(
      withdrawer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, WithdrawalReceiptStructOutput] & {
        withdrawalAmount: BigNumber;
        withdrawalShares: BigNumber;
        withdrawalReceipt: WithdrawalReceiptStructOutput;
      }
    >;

    deposit(
      depositor: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositAmount: BigNumber;
        unredeemedShares: BigNumber;
      }
    >;

    executeEpochCalculation(
      totalSupply: BigNumberish,
      assets: BigNumberish,
      liabilities: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        newPricePerShareDeposit: BigNumber;
        newPricePerShareWithdrawal: BigNumber;
        sharesToMint: BigNumber;
        totalWithdrawAmount: BigNumber;
        amountNeeded: BigNumber;
      }
    >;

    initiateWithdraw(
      withdrawer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [WithdrawalReceiptStructOutput] & {
        withdrawalReceipt: WithdrawalReceiptStructOutput;
      }
    >;

    liquidityPool(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      redeemer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, DepositReceiptStructOutput] & { toRedeem: BigNumber }
    >;

    sharesForAmount(
      _amount: BigNumberish,
      assetPerShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;

    strikeAsset(overrides?: CallOverrides): Promise<[string]>;

    underlyingAsset(overrides?: CallOverrides): Promise<[string]>;
  };

  amountForShares(
    _shares: BigNumberish,
    _assetPerShare: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  completeWithdraw(
    withdrawer: string,
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, WithdrawalReceiptStructOutput] & {
      withdrawalAmount: BigNumber;
      withdrawalShares: BigNumber;
      withdrawalReceipt: WithdrawalReceiptStructOutput;
    }
  >;

  deposit(
    depositor: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      depositAmount: BigNumber;
      unredeemedShares: BigNumber;
    }
  >;

  executeEpochCalculation(
    totalSupply: BigNumberish,
    assets: BigNumberish,
    liabilities: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      newPricePerShareDeposit: BigNumber;
      newPricePerShareWithdrawal: BigNumber;
      sharesToMint: BigNumber;
      totalWithdrawAmount: BigNumber;
      amountNeeded: BigNumber;
    }
  >;

  initiateWithdraw(
    withdrawer: string,
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<WithdrawalReceiptStructOutput>;

  liquidityPool(overrides?: CallOverrides): Promise<string>;

  redeem(
    redeemer: string,
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, DepositReceiptStructOutput] & { toRedeem: BigNumber }>;

  sharesForAmount(
    _amount: BigNumberish,
    assetPerShare: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  strikeAsset(overrides?: CallOverrides): Promise<string>;

  underlyingAsset(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    amountForShares(
      _shares: BigNumberish,
      _assetPerShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    completeWithdraw(
      withdrawer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, WithdrawalReceiptStructOutput] & {
        withdrawalAmount: BigNumber;
        withdrawalShares: BigNumber;
        withdrawalReceipt: WithdrawalReceiptStructOutput;
      }
    >;

    deposit(
      depositor: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        depositAmount: BigNumber;
        unredeemedShares: BigNumber;
      }
    >;

    executeEpochCalculation(
      totalSupply: BigNumberish,
      assets: BigNumberish,
      liabilities: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        newPricePerShareDeposit: BigNumber;
        newPricePerShareWithdrawal: BigNumber;
        sharesToMint: BigNumber;
        totalWithdrawAmount: BigNumber;
        amountNeeded: BigNumber;
      }
    >;

    initiateWithdraw(
      withdrawer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<WithdrawalReceiptStructOutput>;

    liquidityPool(overrides?: CallOverrides): Promise<string>;

    redeem(
      redeemer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, DepositReceiptStructOutput] & { toRedeem: BigNumber }
    >;

    sharesForAmount(
      _amount: BigNumberish,
      assetPerShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strikeAsset(overrides?: CallOverrides): Promise<string>;

    underlyingAsset(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    amountForShares(
      _shares: BigNumberish,
      _assetPerShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    completeWithdraw(
      withdrawer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      depositor: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeEpochCalculation(
      totalSupply: BigNumberish,
      assets: BigNumberish,
      liabilities: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateWithdraw(
      withdrawer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      redeemer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sharesForAmount(
      _amount: BigNumberish,
      assetPerShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    strikeAsset(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    amountForShares(
      _shares: BigNumberish,
      _assetPerShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completeWithdraw(
      withdrawer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      depositor: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeEpochCalculation(
      totalSupply: BigNumberish,
      assets: BigNumberish,
      liabilities: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateWithdraw(
      withdrawer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      redeemer: string,
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharesForAmount(
      _amount: BigNumberish,
      assetPerShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    strikeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
