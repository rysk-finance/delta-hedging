/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OptionSeriesStruct = {
  expiration: BigNumberish;
  strike: BigNumberish;
  isPut: boolean;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export type OptionSeriesStructOutput = [
  BigNumber,
  BigNumber,
  boolean,
  string,
  string,
  string
] & {
  expiration: BigNumber;
  strike: BigNumber;
  isPut: boolean;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export interface AlphaOptionHandlerInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "createOrder((uint64,uint128,bool,address,address,address),uint256,uint256,uint256,address,bool,uint256[2])": FunctionFragment;
    "createStrangle((uint64,uint128,bool,address,address,address),(uint64,uint128,bool,address,address,address),uint256,uint256,uint256,uint256,uint256,address,uint256[2],uint256[2])": FunctionFragment;
    "customOrderBounds()": FunctionFragment;
    "executeBuyBackOrder(uint256)": FunctionFragment;
    "executeOrder(uint256)": FunctionFragment;
    "executeStrangle(uint256,uint256)": FunctionFragment;
    "liquidityPool()": FunctionFragment;
    "orderIdCounter()": FunctionFragment;
    "orderStores(uint256)": FunctionFragment;
    "protocol()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setCustomOrderBounds(uint128,uint128,int128,int128,uint32)": FunctionFragment;
    "strikeAsset()": FunctionFragment;
    "underlyingAsset()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      OptionSeriesStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      boolean,
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createStrangle",
    values: [
      OptionSeriesStruct,
      OptionSeriesStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "customOrderBounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeBuyBackOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOrder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeStrangle",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "orderStores",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "protocol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCustomOrderBounds",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "strikeAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStrangle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customOrderBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBuyBackOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeStrangle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "orderStores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCustomOrderBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strikeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "OrderCreated(uint256)": EventFragment;
    "OrderExecuted(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderExecuted"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export type OrderCreatedEvent = TypedEvent<[BigNumber], { orderId: BigNumber }>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export type OrderExecutedEvent = TypedEvent<
  [BigNumber],
  { orderId: BigNumber }
>;

export type OrderExecutedEventFilter = TypedEventFilter<OrderExecutedEvent>;

export interface AlphaOptionHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AlphaOptionHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    createOrder(
      _optionSeries: OptionSeriesStruct,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _isBuyBack: boolean,
      _spotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createStrangle(
      _optionSeriesCall: OptionSeriesStruct,
      _optionSeriesPut: OptionSeriesStruct,
      _amountCall: BigNumberish,
      _amountPut: BigNumberish,
      _priceCall: BigNumberish,
      _pricePut: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _callSpotMovementRange: [BigNumberish, BigNumberish],
      _putSpotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    customOrderBounds(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        callMinDelta: BigNumber;
        callMaxDelta: BigNumber;
        putMinDelta: BigNumber;
        putMaxDelta: BigNumber;
        maxPriceRange: BigNumber;
      }
    >;

    executeBuyBackOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeStrangle(
      _orderId1: BigNumberish,
      _orderId2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityPool(overrides?: CallOverrides): Promise<[string]>;

    orderIdCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    orderStores(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        OptionSeriesStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        optionSeries: OptionSeriesStructOutput;
        amount: BigNumber;
        price: BigNumber;
        orderExpiry: BigNumber;
        buyer: string;
        seriesAddress: string;
        lowerSpotMovementRange: BigNumber;
        upperSpotMovementRange: BigNumber;
        isBuyBack: boolean;
      }
    >;

    protocol(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCustomOrderBounds(
      _callMinDelta: BigNumberish,
      _callMaxDelta: BigNumberish,
      _putMinDelta: BigNumberish,
      _putMaxDelta: BigNumberish,
      _maxPriceRange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strikeAsset(overrides?: CallOverrides): Promise<[string]>;

    underlyingAsset(overrides?: CallOverrides): Promise<[string]>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  createOrder(
    _optionSeries: OptionSeriesStruct,
    _amount: BigNumberish,
    _price: BigNumberish,
    _orderExpiry: BigNumberish,
    _buyerAddress: string,
    _isBuyBack: boolean,
    _spotMovementRange: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createStrangle(
    _optionSeriesCall: OptionSeriesStruct,
    _optionSeriesPut: OptionSeriesStruct,
    _amountCall: BigNumberish,
    _amountPut: BigNumberish,
    _priceCall: BigNumberish,
    _pricePut: BigNumberish,
    _orderExpiry: BigNumberish,
    _buyerAddress: string,
    _callSpotMovementRange: [BigNumberish, BigNumberish],
    _putSpotMovementRange: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  customOrderBounds(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      callMinDelta: BigNumber;
      callMaxDelta: BigNumber;
      putMinDelta: BigNumber;
      putMaxDelta: BigNumber;
      maxPriceRange: BigNumber;
    }
  >;

  executeBuyBackOrder(
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeOrder(
    _orderId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeStrangle(
    _orderId1: BigNumberish,
    _orderId2: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityPool(overrides?: CallOverrides): Promise<string>;

  orderIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

  orderStores(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      OptionSeriesStructOutput,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      optionSeries: OptionSeriesStructOutput;
      amount: BigNumber;
      price: BigNumber;
      orderExpiry: BigNumber;
      buyer: string;
      seriesAddress: string;
      lowerSpotMovementRange: BigNumber;
      upperSpotMovementRange: BigNumber;
      isBuyBack: boolean;
    }
  >;

  protocol(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCustomOrderBounds(
    _callMinDelta: BigNumberish,
    _callMaxDelta: BigNumberish,
    _putMinDelta: BigNumberish,
    _putMaxDelta: BigNumberish,
    _maxPriceRange: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strikeAsset(overrides?: CallOverrides): Promise<string>;

  underlyingAsset(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    createOrder(
      _optionSeries: OptionSeriesStruct,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _isBuyBack: boolean,
      _spotMovementRange: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createStrangle(
      _optionSeriesCall: OptionSeriesStruct,
      _optionSeriesPut: OptionSeriesStruct,
      _amountCall: BigNumberish,
      _amountPut: BigNumberish,
      _priceCall: BigNumberish,
      _pricePut: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _callSpotMovementRange: [BigNumberish, BigNumberish],
      _putSpotMovementRange: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    customOrderBounds(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        callMinDelta: BigNumber;
        callMaxDelta: BigNumber;
        putMinDelta: BigNumber;
        putMaxDelta: BigNumber;
        maxPriceRange: BigNumber;
      }
    >;

    executeBuyBackOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeOrder(
      _orderId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeStrangle(
      _orderId1: BigNumberish,
      _orderId2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    liquidityPool(overrides?: CallOverrides): Promise<string>;

    orderIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    orderStores(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        OptionSeriesStructOutput,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        optionSeries: OptionSeriesStructOutput;
        amount: BigNumber;
        price: BigNumber;
        orderExpiry: BigNumber;
        buyer: string;
        seriesAddress: string;
        lowerSpotMovementRange: BigNumber;
        upperSpotMovementRange: BigNumber;
        isBuyBack: boolean;
      }
    >;

    protocol(overrides?: CallOverrides): Promise<string>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCustomOrderBounds(
      _callMinDelta: BigNumberish,
      _callMaxDelta: BigNumberish,
      _putMinDelta: BigNumberish,
      _putMaxDelta: BigNumberish,
      _maxPriceRange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    strikeAsset(overrides?: CallOverrides): Promise<string>;

    underlyingAsset(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "OrderCreated(uint256)"(orderId?: null): OrderCreatedEventFilter;
    OrderCreated(orderId?: null): OrderCreatedEventFilter;

    "OrderExecuted(uint256)"(orderId?: null): OrderExecutedEventFilter;
    OrderExecuted(orderId?: null): OrderExecutedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    createOrder(
      _optionSeries: OptionSeriesStruct,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _isBuyBack: boolean,
      _spotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createStrangle(
      _optionSeriesCall: OptionSeriesStruct,
      _optionSeriesPut: OptionSeriesStruct,
      _amountCall: BigNumberish,
      _amountPut: BigNumberish,
      _priceCall: BigNumberish,
      _pricePut: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _callSpotMovementRange: [BigNumberish, BigNumberish],
      _putSpotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    customOrderBounds(overrides?: CallOverrides): Promise<BigNumber>;

    executeBuyBackOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeStrangle(
      _orderId1: BigNumberish,
      _orderId2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    orderIdCounter(overrides?: CallOverrides): Promise<BigNumber>;

    orderStores(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    protocol(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCustomOrderBounds(
      _callMinDelta: BigNumberish,
      _callMaxDelta: BigNumberish,
      _putMinDelta: BigNumberish,
      _putMaxDelta: BigNumberish,
      _maxPriceRange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strikeAsset(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createOrder(
      _optionSeries: OptionSeriesStruct,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _isBuyBack: boolean,
      _spotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createStrangle(
      _optionSeriesCall: OptionSeriesStruct,
      _optionSeriesPut: OptionSeriesStruct,
      _amountCall: BigNumberish,
      _amountPut: BigNumberish,
      _priceCall: BigNumberish,
      _pricePut: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _callSpotMovementRange: [BigNumberish, BigNumberish],
      _putSpotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    customOrderBounds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeBuyBackOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeOrder(
      _orderId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeStrangle(
      _orderId1: BigNumberish,
      _orderId2: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderIdCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderStores(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCustomOrderBounds(
      _callMinDelta: BigNumberish,
      _callMaxDelta: BigNumberish,
      _putMinDelta: BigNumberish,
      _putMaxDelta: BigNumberish,
      _maxPriceRange: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strikeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    underlyingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
