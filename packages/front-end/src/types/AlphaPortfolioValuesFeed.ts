/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OptionSeriesStruct = {
  expiration: BigNumberish;
  strike: BigNumberish;
  isPut: boolean;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export type OptionSeriesStructOutput = [
  BigNumber,
  BigNumber,
  boolean,
  string,
  string,
  string
] & {
  expiration: BigNumber;
  strike: BigNumber;
  isPut: boolean;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export type PortfolioValuesStruct = {
  delta: BigNumberish;
  gamma: BigNumberish;
  vega: BigNumberish;
  theta: BigNumberish;
  callPutsValue: BigNumberish;
  timestamp: BigNumberish;
  spotPrice: BigNumberish;
};

export type PortfolioValuesStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  delta: BigNumber;
  gamma: BigNumber;
  vega: BigNumber;
  theta: BigNumber;
  callPutsValue: BigNumber;
  timestamp: BigNumber;
  spotPrice: BigNumber;
};

export interface AlphaPortfolioValuesFeedInterface extends utils.Interface {
  functions: {
    "accountLiquidatedSeries(address)": FunctionFragment;
    "addressAtIndexInSet(uint256)": FunctionFragment;
    "addressSetLength()": FunctionFragment;
    "authority()": FunctionFragment;
    "cleanLooperManually(address)": FunctionFragment;
    "fulfill(address,address)": FunctionFragment;
    "getAddressSet()": FunctionFragment;
    "getPortfolioValues(address,address)": FunctionFragment;
    "handler(address)": FunctionFragment;
    "isAddressInSet(address)": FunctionFragment;
    "keeper(address)": FunctionFragment;
    "liquidityPool()": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "protocol()": FunctionFragment;
    "requestPortfolioData(address,address)": FunctionFragment;
    "rfr()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setHandler(address,bool)": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setLiquidityPool(address)": FunctionFragment;
    "setProtocol(address)": FunctionFragment;
    "setRFR(uint256)": FunctionFragment;
    "storesForAddress(address)": FunctionFragment;
    "syncLooper()": FunctionFragment;
    "updateStores((uint64,uint128,bool,address,address,address),int256,int256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accountLiquidatedSeries",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addressAtIndexInSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressSetLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cleanLooperManually",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fulfill",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPortfolioValues",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "handler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isAddressInSet",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "migrate", values: [string]): string;
  encodeFunctionData(functionFragment: "protocol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "requestPortfolioData",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "rfr", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHandler",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setProtocol", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setRFR",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "storesForAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "syncLooper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateStores",
    values: [OptionSeriesStruct, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accountLiquidatedSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressAtIndexInSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressSetLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cleanLooperManually",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fulfill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAddressSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortfolioValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "handler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAddressInSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestPortfolioData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rfr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRFR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "storesForAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "syncLooper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateStores",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "DataFullfilled(address,address,int256,int256,int256,int256,int256)": EventFragment;
    "RequestedUpdate(address,address)": EventFragment;
    "StoresUpdated(address,int256,int256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DataFullfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedUpdate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoresUpdated"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export type DataFullfilledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  {
    underlying: string;
    strike: string;
    delta: BigNumber;
    gamma: BigNumber;
    vega: BigNumber;
    theta: BigNumber;
    callPutsValue: BigNumber;
  }
>;

export type DataFullfilledEventFilter = TypedEventFilter<DataFullfilledEvent>;

export type RequestedUpdateEvent = TypedEvent<
  [string, string],
  { _underlying: string; _strike: string }
>;

export type RequestedUpdateEventFilter = TypedEventFilter<RequestedUpdateEvent>;

export type StoresUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, OptionSeriesStructOutput],
  {
    seriesAddress: string;
    shortExposure: BigNumber;
    longExposure: BigNumber;
    optionSeries: OptionSeriesStructOutput;
  }
>;

export type StoresUpdatedEventFilter = TypedEventFilter<StoresUpdatedEvent>;

export interface AlphaPortfolioValuesFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AlphaPortfolioValuesFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountLiquidatedSeries(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addressAtIndexInSet(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    addressSetLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    cleanLooperManually(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fulfill(
      _underlying: string,
      _strikeAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAddressSet(overrides?: CallOverrides): Promise<[string[]]>;

    getPortfolioValues(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<[PortfolioValuesStructOutput]>;

    handler(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isAddressInSet(_a: string, overrides?: CallOverrides): Promise<[boolean]>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    liquidityPool(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      _migrateContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocol(overrides?: CallOverrides): Promise<[string]>;

    requestPortfolioData(
      _underlying: string,
      _strike: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rfr(overrides?: CallOverrides): Promise<[BigNumber]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHandler(
      _handler: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocol(
      _protocol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRFR(
      _rfr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storesForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [OptionSeriesStructOutput, BigNumber, BigNumber] & {
        optionSeries: OptionSeriesStructOutput;
        shortExposure: BigNumber;
        longExposure: BigNumber;
      }
    >;

    syncLooper(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStores(
      _optionSeries: OptionSeriesStruct,
      shortExposure: BigNumberish,
      longExposure: BigNumberish,
      _seriesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountLiquidatedSeries(
    _series: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addressAtIndexInSet(
    _i: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  addressSetLength(overrides?: CallOverrides): Promise<BigNumber>;

  authority(overrides?: CallOverrides): Promise<string>;

  cleanLooperManually(
    _series: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fulfill(
    _underlying: string,
    _strikeAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAddressSet(overrides?: CallOverrides): Promise<string[]>;

  getPortfolioValues(
    underlying: string,
    strike: string,
    overrides?: CallOverrides
  ): Promise<PortfolioValuesStructOutput>;

  handler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isAddressInSet(_a: string, overrides?: CallOverrides): Promise<boolean>;

  keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  liquidityPool(overrides?: CallOverrides): Promise<string>;

  migrate(
    _migrateContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocol(overrides?: CallOverrides): Promise<string>;

  requestPortfolioData(
    _underlying: string,
    _strike: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rfr(overrides?: CallOverrides): Promise<BigNumber>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHandler(
    _handler: string,
    _auth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    _auth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityPool(
    _liquidityPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocol(
    _protocol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRFR(
    _rfr: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storesForAddress(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [OptionSeriesStructOutput, BigNumber, BigNumber] & {
      optionSeries: OptionSeriesStructOutput;
      shortExposure: BigNumber;
      longExposure: BigNumber;
    }
  >;

  syncLooper(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStores(
    _optionSeries: OptionSeriesStruct,
    shortExposure: BigNumberish,
    longExposure: BigNumberish,
    _seriesAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountLiquidatedSeries(
      _series: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addressAtIndexInSet(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    addressSetLength(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<string>;

    cleanLooperManually(
      _series: string,
      overrides?: CallOverrides
    ): Promise<void>;

    fulfill(
      _underlying: string,
      _strikeAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressSet(overrides?: CallOverrides): Promise<string[]>;

    getPortfolioValues(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<PortfolioValuesStructOutput>;

    handler(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isAddressInSet(_a: string, overrides?: CallOverrides): Promise<boolean>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    liquidityPool(overrides?: CallOverrides): Promise<string>;

    migrate(_migrateContract: string, overrides?: CallOverrides): Promise<void>;

    protocol(overrides?: CallOverrides): Promise<string>;

    requestPortfolioData(
      _underlying: string,
      _strike: string,
      overrides?: CallOverrides
    ): Promise<string>;

    rfr(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHandler(
      _handler: string,
      _auth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtocol(_protocol: string, overrides?: CallOverrides): Promise<void>;

    setRFR(_rfr: BigNumberish, overrides?: CallOverrides): Promise<void>;

    storesForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [OptionSeriesStructOutput, BigNumber, BigNumber] & {
        optionSeries: OptionSeriesStructOutput;
        shortExposure: BigNumber;
        longExposure: BigNumber;
      }
    >;

    syncLooper(overrides?: CallOverrides): Promise<void>;

    updateStores(
      _optionSeries: OptionSeriesStruct,
      shortExposure: BigNumberish,
      longExposure: BigNumberish,
      _seriesAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "DataFullfilled(address,address,int256,int256,int256,int256,int256)"(
      underlying?: string | null,
      strike?: string | null,
      delta?: null,
      gamma?: null,
      vega?: null,
      theta?: null,
      callPutsValue?: null
    ): DataFullfilledEventFilter;
    DataFullfilled(
      underlying?: string | null,
      strike?: string | null,
      delta?: null,
      gamma?: null,
      vega?: null,
      theta?: null,
      callPutsValue?: null
    ): DataFullfilledEventFilter;

    "RequestedUpdate(address,address)"(
      _underlying?: null,
      _strike?: null
    ): RequestedUpdateEventFilter;
    RequestedUpdate(
      _underlying?: null,
      _strike?: null
    ): RequestedUpdateEventFilter;

    "StoresUpdated(address,int256,int256,tuple)"(
      seriesAddress?: null,
      shortExposure?: null,
      longExposure?: null,
      optionSeries?: null
    ): StoresUpdatedEventFilter;
    StoresUpdated(
      seriesAddress?: null,
      shortExposure?: null,
      longExposure?: null,
      optionSeries?: null
    ): StoresUpdatedEventFilter;
  };

  estimateGas: {
    accountLiquidatedSeries(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addressAtIndexInSet(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addressSetLength(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    cleanLooperManually(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fulfill(
      _underlying: string,
      _strikeAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAddressSet(overrides?: CallOverrides): Promise<BigNumber>;

    getPortfolioValues(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handler(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isAddressInSet(_a: string, overrides?: CallOverrides): Promise<BigNumber>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      _migrateContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocol(overrides?: CallOverrides): Promise<BigNumber>;

    requestPortfolioData(
      _underlying: string,
      _strike: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rfr(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHandler(
      _handler: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocol(
      _protocol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRFR(
      _rfr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storesForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    syncLooper(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStores(
      _optionSeries: OptionSeriesStruct,
      shortExposure: BigNumberish,
      longExposure: BigNumberish,
      _seriesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountLiquidatedSeries(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addressAtIndexInSet(
      _i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addressSetLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cleanLooperManually(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fulfill(
      _underlying: string,
      _strikeAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAddressSet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPortfolioValues(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    handler(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAddressInSet(
      _a: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      _migrateContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestPortfolioData(
      _underlying: string,
      _strike: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rfr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHandler(
      _handler: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityPool(
      _liquidityPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocol(
      _protocol: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRFR(
      _rfr: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storesForAddress(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    syncLooper(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStores(
      _optionSeries: OptionSeriesStruct,
      shortExposure: BigNumberish,
      longExposure: BigNumberish,
      _seriesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
