/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface AuthorityInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "governor()": FunctionFragment;
    "guardian(address)": FunctionFragment;
    "manager()": FunctionFragment;
    "newGovernor()": FunctionFragment;
    "newManager()": FunctionFragment;
    "pullGovernor()": FunctionFragment;
    "pullManager()": FunctionFragment;
    "pushGovernor(address,bool)": FunctionFragment;
    "pushGuardian(address)": FunctionFragment;
    "pushManager(address,bool)": FunctionFragment;
    "revokeGuardian(address)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(functionFragment: "guardian", values: [string]): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullGovernor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pushGovernor",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "pushGuardian",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "pushManager",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeGuardian",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "GovernorPulled(address,address)": EventFragment;
    "GovernorPushed(address,address,bool)": EventFragment;
    "GuardianPulled(address)": EventFragment;
    "GuardianPushed(address,bool)": EventFragment;
    "ManagerPulled(address,address)": EventFragment;
    "ManagerPushed(address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GuardianPushed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerPulled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerPushed"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export type GovernorPulledEvent = TypedEvent<
  [string, string],
  { from: string; to: string }
>;

export type GovernorPulledEventFilter = TypedEventFilter<GovernorPulledEvent>;

export type GovernorPushedEvent = TypedEvent<
  [string, string, boolean],
  { from: string; to: string; _effectiveImmediately: boolean }
>;

export type GovernorPushedEventFilter = TypedEventFilter<GovernorPushedEvent>;

export type GuardianPulledEvent = TypedEvent<[string], { to: string }>;

export type GuardianPulledEventFilter = TypedEventFilter<GuardianPulledEvent>;

export type GuardianPushedEvent = TypedEvent<
  [string, boolean],
  { to: string; _effectiveImmediately: boolean }
>;

export type GuardianPushedEventFilter = TypedEventFilter<GuardianPushedEvent>;

export type ManagerPulledEvent = TypedEvent<
  [string, string],
  { from: string; to: string }
>;

export type ManagerPulledEventFilter = TypedEventFilter<ManagerPulledEvent>;

export type ManagerPushedEvent = TypedEvent<
  [string, string, boolean],
  { from: string; to: string; _effectiveImmediately: boolean }
>;

export type ManagerPushedEventFilter = TypedEventFilter<ManagerPushedEvent>;

export interface Authority extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuthorityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    guardian(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    manager(overrides?: CallOverrides): Promise<[string]>;

    newGovernor(overrides?: CallOverrides): Promise<[string]>;

    newManager(overrides?: CallOverrides): Promise<[string]>;

    pullGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pullManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushGovernor(
      _newGovernor: string,
      _effectiveImmediately: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushGuardian(
      _newGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pushManager(
      _newManager: string,
      _effectiveImmediately: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  governor(overrides?: CallOverrides): Promise<string>;

  guardian(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  manager(overrides?: CallOverrides): Promise<string>;

  newGovernor(overrides?: CallOverrides): Promise<string>;

  newManager(overrides?: CallOverrides): Promise<string>;

  pullGovernor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pullManager(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushGovernor(
    _newGovernor: string,
    _effectiveImmediately: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushGuardian(
    _newGuardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pushManager(
    _newManager: string,
    _effectiveImmediately: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeGuardian(
    _guardian: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    governor(overrides?: CallOverrides): Promise<string>;

    guardian(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    manager(overrides?: CallOverrides): Promise<string>;

    newGovernor(overrides?: CallOverrides): Promise<string>;

    newManager(overrides?: CallOverrides): Promise<string>;

    pullGovernor(overrides?: CallOverrides): Promise<void>;

    pullManager(overrides?: CallOverrides): Promise<void>;

    pushGovernor(
      _newGovernor: string,
      _effectiveImmediately: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    pushGuardian(
      _newGuardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    pushManager(
      _newManager: string,
      _effectiveImmediately: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeGuardian(_guardian: string, overrides?: CallOverrides): Promise<void>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "GovernorPulled(address,address)"(
      from?: string | null,
      to?: string | null
    ): GovernorPulledEventFilter;
    GovernorPulled(
      from?: string | null,
      to?: string | null
    ): GovernorPulledEventFilter;

    "GovernorPushed(address,address,bool)"(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): GovernorPushedEventFilter;
    GovernorPushed(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): GovernorPushedEventFilter;

    "GuardianPulled(address)"(to?: string | null): GuardianPulledEventFilter;
    GuardianPulled(to?: string | null): GuardianPulledEventFilter;

    "GuardianPushed(address,bool)"(
      to?: string | null,
      _effectiveImmediately?: null
    ): GuardianPushedEventFilter;
    GuardianPushed(
      to?: string | null,
      _effectiveImmediately?: null
    ): GuardianPushedEventFilter;

    "ManagerPulled(address,address)"(
      from?: string | null,
      to?: string | null
    ): ManagerPulledEventFilter;
    ManagerPulled(
      from?: string | null,
      to?: string | null
    ): ManagerPulledEventFilter;

    "ManagerPushed(address,address,bool)"(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): ManagerPushedEventFilter;
    ManagerPushed(
      from?: string | null,
      to?: string | null,
      _effectiveImmediately?: null
    ): ManagerPushedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    guardian(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    manager(overrides?: CallOverrides): Promise<BigNumber>;

    newGovernor(overrides?: CallOverrides): Promise<BigNumber>;

    newManager(overrides?: CallOverrides): Promise<BigNumber>;

    pullGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pullManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushGovernor(
      _newGovernor: string,
      _effectiveImmediately: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushGuardian(
      _newGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pushManager(
      _newManager: string,
      _effectiveImmediately: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    guardian(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    manager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newGovernor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullGovernor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pullManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushGovernor(
      _newGovernor: string,
      _effectiveImmediately: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushGuardian(
      _newGuardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pushManager(
      _newManager: string,
      _effectiveImmediately: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeGuardian(
      _guardian: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
