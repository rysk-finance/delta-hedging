/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type FixedPointIntStruct = { value: BigNumberish };

export type FixedPointIntStructOutput = [BigNumber] & { value: BigNumber };

export interface FixedPointInt256TesterInterface extends utils.Interface {
  functions: {
    "testAdd((int256),(int256))": FunctionFragment;
    "testDiv((int256),(int256))": FunctionFragment;
    "testFromUnscaledInt(int256)": FunctionFragment;
    "testIsEqual((int256),(int256))": FunctionFragment;
    "testIsGreaterThan((int256),(int256))": FunctionFragment;
    "testIsGreaterThanOrEqual((int256),(int256))": FunctionFragment;
    "testIsLessThan((int256),(int256))": FunctionFragment;
    "testIsLessThanOrEqual((int256),(int256))": FunctionFragment;
    "testMax((int256),(int256))": FunctionFragment;
    "testMin((int256),(int256))": FunctionFragment;
    "testMul((int256),(int256))": FunctionFragment;
    "testSub((int256),(int256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "testAdd",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testDiv",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testFromUnscaledInt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsEqual",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsGreaterThan",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsGreaterThanOrEqual",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsLessThan",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testIsLessThanOrEqual",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testMax",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testMin",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testMul",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "testSub",
    values: [FixedPointIntStruct, FixedPointIntStruct]
  ): string;

  decodeFunctionResult(functionFragment: "testAdd", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testDiv", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testFromUnscaledInt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsGreaterThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsGreaterThanOrEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsLessThan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testIsLessThanOrEqual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testMin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testMul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testSub", data: BytesLike): Result;

  events: {};
}

export interface FixedPointInt256Tester extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FixedPointInt256TesterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    testAdd(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[FixedPointIntStructOutput]>;

    testDiv(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[FixedPointIntStructOutput]>;

    testFromUnscaledInt(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[FixedPointIntStructOutput]>;

    testIsEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testIsGreaterThan(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testIsGreaterThanOrEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testIsLessThan(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testIsLessThanOrEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    testMax(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[FixedPointIntStructOutput]>;

    testMin(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[FixedPointIntStructOutput]>;

    testMul(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[FixedPointIntStructOutput]>;

    testSub(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<[FixedPointIntStructOutput]>;
  };

  testAdd(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<FixedPointIntStructOutput>;

  testDiv(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<FixedPointIntStructOutput>;

  testFromUnscaledInt(
    a: BigNumberish,
    overrides?: CallOverrides
  ): Promise<FixedPointIntStructOutput>;

  testIsEqual(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testIsGreaterThan(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testIsGreaterThanOrEqual(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testIsLessThan(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testIsLessThanOrEqual(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  testMax(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<FixedPointIntStructOutput>;

  testMin(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<FixedPointIntStructOutput>;

  testMul(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<FixedPointIntStructOutput>;

  testSub(
    a: FixedPointIntStruct,
    b: FixedPointIntStruct,
    overrides?: CallOverrides
  ): Promise<FixedPointIntStructOutput>;

  callStatic: {
    testAdd(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<FixedPointIntStructOutput>;

    testDiv(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<FixedPointIntStructOutput>;

    testFromUnscaledInt(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<FixedPointIntStructOutput>;

    testIsEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testIsGreaterThan(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testIsGreaterThanOrEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testIsLessThan(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testIsLessThanOrEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;

    testMax(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<FixedPointIntStructOutput>;

    testMin(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<FixedPointIntStructOutput>;

    testMul(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<FixedPointIntStructOutput>;

    testSub(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<FixedPointIntStructOutput>;
  };

  filters: {};

  estimateGas: {
    testAdd(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testDiv(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testFromUnscaledInt(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testIsEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testIsGreaterThan(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testIsGreaterThanOrEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testIsLessThan(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testIsLessThanOrEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testMax(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testMin(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testMul(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    testSub(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    testAdd(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testDiv(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testFromUnscaledInt(
      a: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testIsEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testIsGreaterThan(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testIsGreaterThanOrEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testIsLessThan(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testIsLessThanOrEqual(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testMax(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testMin(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testMul(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    testSub(
      a: FixedPointIntStruct,
      b: FixedPointIntStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
