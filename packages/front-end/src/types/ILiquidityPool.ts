/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type DepositReceiptStruct = {
  epoch: BigNumberish;
  amount: BigNumberish;
  unredeemedShares: BigNumberish;
};

export type DepositReceiptStructOutput = [BigNumber, BigNumber, BigNumber] & {
  epoch: BigNumber;
  amount: BigNumber;
  unredeemedShares: BigNumber;
};

export type OptionSeriesStruct = {
  expiration: BigNumberish;
  strike: BigNumberish;
  isPut: boolean;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export type OptionSeriesStructOutput = [
  BigNumber,
  BigNumber,
  boolean,
  string,
  string,
  string
] & {
  expiration: BigNumber;
  strike: BigNumber;
  isPut: boolean;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export type WithdrawalReceiptStruct = {
  epoch: BigNumberish;
  shares: BigNumberish;
};

export type WithdrawalReceiptStructOutput = [BigNumber, BigNumber] & {
  epoch: BigNumber;
  shares: BigNumber;
};

export interface ILiquidityPoolInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bufferPercentage()": FunctionFragment;
    "checkBuffer()": FunctionFragment;
    "collateralAllocated()": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "collateralCap()": FunctionFragment;
    "depositEpoch()": FunctionFragment;
    "depositEpochPricePerShare(uint256)": FunctionFragment;
    "depositReceipts(address)": FunctionFragment;
    "ephemeralDelta()": FunctionFragment;
    "ephemeralLiabilities()": FunctionFragment;
    "getAssets()": FunctionFragment;
    "getBalance(address)": FunctionFragment;
    "getPortfolioDelta()": FunctionFragment;
    "handlerBuybackOption((uint64,uint128,bool,address,address,address),uint256,address,address,uint256,int256,address)": FunctionFragment;
    "handlerIssue((uint64,uint128,bool,address,address,address))": FunctionFragment;
    "handlerIssueAndWriteOption((uint64,uint128,bool,address,address,address),uint256,uint256,int256,address)": FunctionFragment;
    "handlerWriteOption((uint64,uint128,bool,address,address,address),address,uint256,address,uint256,int256,address)": FunctionFragment;
    "partitionedFunds()": FunctionFragment;
    "pendingDeposits()": FunctionFragment;
    "pendingWithdrawals()": FunctionFragment;
    "quotePriceWithUtilizationGreeks((uint64,uint128,bool,address,address,address),uint256,bool)": FunctionFragment;
    "redeem(uint256)": FunctionFragment;
    "resetEphemeralValues()": FunctionFragment;
    "strikeAsset()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "underlyingAsset()": FunctionFragment;
    "withdrawalEpoch()": FunctionFragment;
    "withdrawalEpochPricePerShare(uint256)": FunctionFragment;
    "withdrawalReceipts(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bufferPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkBuffer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositEpochPricePerShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositReceipts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "ephemeralDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ephemeralLiabilities",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAssets", values?: undefined): string;
  encodeFunctionData(functionFragment: "getBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getPortfolioDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "handlerBuybackOption",
    values: [
      OptionSeriesStruct,
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handlerIssue",
    values: [OptionSeriesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "handlerIssueAndWriteOption",
    values: [
      OptionSeriesStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handlerWriteOption",
    values: [
      OptionSeriesStruct,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "partitionedFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingDeposits",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quotePriceWithUtilizationGreeks",
    values: [OptionSeriesStruct, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "resetEphemeralValues",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "strikeAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalEpochPricePerShare",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawalReceipts",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bufferPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBuffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositEpochPricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositReceipts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ephemeralDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ephemeralLiabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAssets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPortfolioDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlerBuybackOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlerIssue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlerIssueAndWriteOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handlerWriteOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "partitionedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePriceWithUtilizationGreeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetEphemeralValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strikeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalEpochPricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawalReceipts",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface ILiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bufferPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    checkBuffer(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bufferRemaining: BigNumber }>;

    collateralAllocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    collateralCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    depositEpochPricePerShare(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    depositReceipts(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<[DepositReceiptStructOutput]>;

    ephemeralDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    ephemeralLiabilities(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBalance(asset: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getPortfolioDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    handlerBuybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      optionRegistry: string,
      seriesAddress: string,
      premium: BigNumberish,
      delta: BigNumberish,
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handlerIssue(
      optionSeries: OptionSeriesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handlerIssueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    handlerWriteOption(
      optionSeries: OptionSeriesStruct,
      seriesAddress: string,
      amount: BigNumberish,
      optionRegistry: string,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    partitionedFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingDeposits(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingWithdrawals(overrides?: CallOverrides): Promise<[BigNumber]>;

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      toBuy: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>;

    redeem(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    resetEphemeralValues(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strikeAsset(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingAsset(overrides?: CallOverrides): Promise<[string]>;

    withdrawalEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawalEpochPricePerShare(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { price: BigNumber }>;

    withdrawalReceipts(
      withdrawer: string,
      overrides?: CallOverrides
    ): Promise<[WithdrawalReceiptStructOutput]>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  bufferPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  checkBuffer(overrides?: CallOverrides): Promise<BigNumber>;

  collateralAllocated(overrides?: CallOverrides): Promise<BigNumber>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  collateralCap(overrides?: CallOverrides): Promise<BigNumber>;

  depositEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  depositEpochPricePerShare(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositReceipts(
    depositor: string,
    overrides?: CallOverrides
  ): Promise<DepositReceiptStructOutput>;

  ephemeralDelta(overrides?: CallOverrides): Promise<BigNumber>;

  ephemeralLiabilities(overrides?: CallOverrides): Promise<BigNumber>;

  getAssets(overrides?: CallOverrides): Promise<BigNumber>;

  getBalance(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  getPortfolioDelta(overrides?: CallOverrides): Promise<BigNumber>;

  handlerBuybackOption(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    optionRegistry: string,
    seriesAddress: string,
    premium: BigNumberish,
    delta: BigNumberish,
    seller: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handlerIssue(
    optionSeries: OptionSeriesStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handlerIssueAndWriteOption(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    premium: BigNumberish,
    delta: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  handlerWriteOption(
    optionSeries: OptionSeriesStruct,
    seriesAddress: string,
    amount: BigNumberish,
    optionRegistry: string,
    premium: BigNumberish,
    delta: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  partitionedFunds(overrides?: CallOverrides): Promise<BigNumber>;

  pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>;

  pendingWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

  quotePriceWithUtilizationGreeks(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    toBuy: boolean,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>;

  redeem(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  resetEphemeralValues(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strikeAsset(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingAsset(overrides?: CallOverrides): Promise<string>;

  withdrawalEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawalEpochPricePerShare(
    epoch: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawalReceipts(
    withdrawer: string,
    overrides?: CallOverrides
  ): Promise<WithdrawalReceiptStructOutput>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bufferPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    checkBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    collateralCap(overrides?: CallOverrides): Promise<BigNumber>;

    depositEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    depositEpochPricePerShare(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositReceipts(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<DepositReceiptStructOutput>;

    ephemeralDelta(overrides?: CallOverrides): Promise<BigNumber>;

    ephemeralLiabilities(overrides?: CallOverrides): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPortfolioDelta(overrides?: CallOverrides): Promise<BigNumber>;

    handlerBuybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      optionRegistry: string,
      seriesAddress: string,
      premium: BigNumberish,
      delta: BigNumberish,
      seller: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    handlerIssue(
      optionSeries: OptionSeriesStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    handlerIssueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string]>;

    handlerWriteOption(
      optionSeries: OptionSeriesStruct,
      seriesAddress: string,
      amount: BigNumberish,
      optionRegistry: string,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    partitionedFunds(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      toBuy: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>;

    redeem(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    resetEphemeralValues(overrides?: CallOverrides): Promise<void>;

    strikeAsset(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    underlyingAsset(overrides?: CallOverrides): Promise<string>;

    withdrawalEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalEpochPricePerShare(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalReceipts(
      withdrawer: string,
      overrides?: CallOverrides
    ): Promise<WithdrawalReceiptStructOutput>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    bufferPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    checkBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    collateralCap(overrides?: CallOverrides): Promise<BigNumber>;

    depositEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    depositEpochPricePerShare(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositReceipts(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ephemeralDelta(overrides?: CallOverrides): Promise<BigNumber>;

    ephemeralLiabilities(overrides?: CallOverrides): Promise<BigNumber>;

    getAssets(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    getPortfolioDelta(overrides?: CallOverrides): Promise<BigNumber>;

    handlerBuybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      optionRegistry: string,
      seriesAddress: string,
      premium: BigNumberish,
      delta: BigNumberish,
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handlerIssue(
      optionSeries: OptionSeriesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handlerIssueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    handlerWriteOption(
      optionSeries: OptionSeriesStruct,
      seriesAddress: string,
      amount: BigNumberish,
      optionRegistry: string,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    partitionedFunds(overrides?: CallOverrides): Promise<BigNumber>;

    pendingDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdrawals(overrides?: CallOverrides): Promise<BigNumber>;

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      toBuy: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeem(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    resetEphemeralValues(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strikeAsset(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalEpochPricePerShare(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawalReceipts(
      withdrawer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bufferPercentage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralAllocated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositEpochPricePerShare(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositReceipts(
      depositor: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ephemeralDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ephemeralLiabilities(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPortfolioDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    handlerBuybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      optionRegistry: string,
      seriesAddress: string,
      premium: BigNumberish,
      delta: BigNumberish,
      seller: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handlerIssue(
      optionSeries: OptionSeriesStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handlerIssueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    handlerWriteOption(
      optionSeries: OptionSeriesStruct,
      seriesAddress: string,
      amount: BigNumberish,
      optionRegistry: string,
      premium: BigNumberish,
      delta: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    partitionedFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingWithdrawals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      toBuy: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeem(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    resetEphemeralValues(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strikeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalEpochPricePerShare(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawalReceipts(
      withdrawer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
