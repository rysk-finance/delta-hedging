/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type PortfolioValuesStruct = {
  delta: BigNumberish;
  gamma: BigNumberish;
  vega: BigNumberish;
  theta: BigNumberish;
  callPutsValue: BigNumberish;
  timestamp: BigNumberish;
  spotPrice: BigNumberish;
};

export type PortfolioValuesStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  delta: BigNumber;
  gamma: BigNumber;
  vega: BigNumber;
  theta: BigNumber;
  callPutsValue: BigNumber;
  timestamp: BigNumber;
  spotPrice: BigNumber;
};

export type OptionSeriesStruct = {
  expiration: BigNumberish;
  strike: BigNumberish;
  isPut: boolean;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export type OptionSeriesStructOutput = [
  BigNumber,
  BigNumber,
  boolean,
  string,
  string,
  string
] & {
  expiration: BigNumber;
  strike: BigNumber;
  isPut: boolean;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export interface IPortfolioValuesFeedInterface extends utils.Interface {
  functions: {
    "getPortfolioValues(address,address)": FunctionFragment;
    "requestPortfolioData(address,address)": FunctionFragment;
    "updateStores((uint64,uint128,bool,address,address,address),int256,int256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getPortfolioValues",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestPortfolioData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateStores",
    values: [OptionSeriesStruct, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getPortfolioValues",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestPortfolioData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateStores",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPortfolioValuesFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPortfolioValuesFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPortfolioValues(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<[PortfolioValuesStructOutput]>;

    requestPortfolioData(
      _underlying: string,
      _strike: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateStores(
      _optionSeries: OptionSeriesStruct,
      _shortExposure: BigNumberish,
      _longExposure: BigNumberish,
      _seriesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getPortfolioValues(
    underlying: string,
    strike: string,
    overrides?: CallOverrides
  ): Promise<PortfolioValuesStructOutput>;

  requestPortfolioData(
    _underlying: string,
    _strike: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateStores(
    _optionSeries: OptionSeriesStruct,
    _shortExposure: BigNumberish,
    _longExposure: BigNumberish,
    _seriesAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getPortfolioValues(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<PortfolioValuesStructOutput>;

    requestPortfolioData(
      _underlying: string,
      _strike: string,
      overrides?: CallOverrides
    ): Promise<string>;

    updateStores(
      _optionSeries: OptionSeriesStruct,
      _shortExposure: BigNumberish,
      _longExposure: BigNumberish,
      _seriesAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getPortfolioValues(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    requestPortfolioData(
      _underlying: string,
      _strike: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateStores(
      _optionSeries: OptionSeriesStruct,
      _shortExposure: BigNumberish,
      _longExposure: BigNumberish,
      _seriesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getPortfolioValues(
      underlying: string,
      strike: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestPortfolioData(
      _underlying: string,
      _strike: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateStores(
      _optionSeries: OptionSeriesStruct,
      _shortExposure: BigNumberish,
      _longExposure: BigNumberish,
      _seriesAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
