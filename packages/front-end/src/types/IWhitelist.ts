/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface IWhitelistInterface extends utils.Interface {
  contractName: "IWhitelist";
  functions: {
    "addressBook()": FunctionFragment;
    "isCoveredWhitelistedCollateral(address,address,bool)": FunctionFragment;
    "isNakedWhitelistedCollateral(address,address,bool)": FunctionFragment;
    "isWhitelistedCollateral(address)": FunctionFragment;
    "isWhitelistedOtoken(address)": FunctionFragment;
    "isWhitelistedProduct(address,address,address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCoveredWhitelistedCollateral",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isNakedWhitelistedCollateral",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedOtoken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedProduct",
    values: [string, string, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCoveredWhitelistedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNakedWhitelistedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedProduct",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IWhitelist extends BaseContract {
  contractName: "IWhitelist";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWhitelistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressBook(overrides?: CallOverrides): Promise<[string]>;

    isCoveredWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNakedWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addressBook(overrides?: CallOverrides): Promise<string>;

  isCoveredWhitelistedCollateral(
    _collateral: string,
    _underlying: string,
    _isPut: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNakedWhitelistedCollateral(
    _collateral: string,
    _underlying: string,
    _isPut: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedCollateral(
    _collateral: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedOtoken(
    _otoken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedProduct(
    _underlying: string,
    _strike: string,
    _collateral: string,
    _isPut: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addressBook(overrides?: CallOverrides): Promise<string>;

    isCoveredWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNakedWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    addressBook(overrides?: CallOverrides): Promise<BigNumber>;

    isCoveredWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNakedWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCoveredWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNakedWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
