/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Types {
  export type OptionSeriesStruct = {
    expiration: BigNumberish;
    strike: BigNumberish;
    isPut: boolean;
    underlying: string;
    strikeAsset: string;
    collateral: string;
  };

  export type OptionSeriesStructOutput = [
    BigNumber,
    BigNumber,
    boolean,
    string,
    string,
    string
  ] & {
    expiration: BigNumber;
    strike: BigNumber;
    isPut: boolean;
    underlying: string;
    strikeAsset: string;
    collateral: string;
  };
}

export interface ManagerInterface extends utils.Interface {
  contractName: "Manager";
  functions: {
    "authority()": FunctionFragment;
    "createOrder((uint64,uint128,bool,address,address,address),uint256,uint256,uint256,address,bool,uint256[2])": FunctionFragment;
    "createStrangle((uint64,uint128,bool,address,address,address),(uint64,uint128,bool,address,address,address),uint256,uint256,uint256,uint256,uint256,address,uint256[2],uint256[2])": FunctionFragment;
    "deltaLimit(address)": FunctionFragment;
    "keeper(address)": FunctionFragment;
    "liquidityPool()": FunctionFragment;
    "optionHandler()": FunctionFragment;
    "proxyManager()": FunctionFragment;
    "pullManager()": FunctionFragment;
    "rebalancePortfolioDelta(int256,uint256)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setDeltaLimit(uint256[],address[])": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setOptionHandler(address)": FunctionFragment;
    "setProxyManager(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createOrder",
    values: [
      Types.OptionSeriesStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      boolean,
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createStrangle",
    values: [
      Types.OptionSeriesStruct,
      Types.OptionSeriesStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(functionFragment: "deltaLimit", values: [string]): string;
  encodeFunctionData(functionFragment: "keeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "liquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "optionHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxyManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pullManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rebalancePortfolioDelta",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeltaLimit",
    values: [BigNumberish[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setOptionHandler",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProxyManager",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStrangle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deltaLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxyManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pullManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalancePortfolioDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeltaLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOptionHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProxyManager",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface Manager extends BaseContract {
  contractName: "Manager";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    createOrder(
      _optionSeries: Types.OptionSeriesStruct,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _isBuyBack: boolean,
      _spotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createStrangle(
      _optionSeriesCall: Types.OptionSeriesStruct,
      _optionSeriesPut: Types.OptionSeriesStruct,
      _amountCall: BigNumberish,
      _amountPut: BigNumberish,
      _priceCall: BigNumberish,
      _pricePut: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _callSpotMovementRange: [BigNumberish, BigNumberish],
      _putSpotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deltaLimit(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    liquidityPool(overrides?: CallOverrides): Promise<[string]>;

    optionHandler(overrides?: CallOverrides): Promise<[string]>;

    proxyManager(overrides?: CallOverrides): Promise<[string]>;

    pullManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDeltaLimit(
      _delta: BigNumberish[],
      _keeper: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOptionHandler(
      _optionHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProxyManager(
      _proxyManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  createOrder(
    _optionSeries: Types.OptionSeriesStruct,
    _amount: BigNumberish,
    _price: BigNumberish,
    _orderExpiry: BigNumberish,
    _buyerAddress: string,
    _isBuyBack: boolean,
    _spotMovementRange: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createStrangle(
    _optionSeriesCall: Types.OptionSeriesStruct,
    _optionSeriesPut: Types.OptionSeriesStruct,
    _amountCall: BigNumberish,
    _amountPut: BigNumberish,
    _priceCall: BigNumberish,
    _pricePut: BigNumberish,
    _orderExpiry: BigNumberish,
    _buyerAddress: string,
    _callSpotMovementRange: [BigNumberish, BigNumberish],
    _putSpotMovementRange: [BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deltaLimit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  liquidityPool(overrides?: CallOverrides): Promise<string>;

  optionHandler(overrides?: CallOverrides): Promise<string>;

  proxyManager(overrides?: CallOverrides): Promise<string>;

  pullManager(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rebalancePortfolioDelta(
    delta: BigNumberish,
    reactorIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDeltaLimit(
    _delta: BigNumberish[],
    _keeper: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    _auth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOptionHandler(
    _optionHandler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProxyManager(
    _proxyManager: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    createOrder(
      _optionSeries: Types.OptionSeriesStruct,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _isBuyBack: boolean,
      _spotMovementRange: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createStrangle(
      _optionSeriesCall: Types.OptionSeriesStruct,
      _optionSeriesPut: Types.OptionSeriesStruct,
      _amountCall: BigNumberish,
      _amountPut: BigNumberish,
      _priceCall: BigNumberish,
      _pricePut: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _callSpotMovementRange: [BigNumberish, BigNumberish],
      _putSpotMovementRange: [BigNumberish, BigNumberish],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    deltaLimit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    liquidityPool(overrides?: CallOverrides): Promise<string>;

    optionHandler(overrides?: CallOverrides): Promise<string>;

    proxyManager(overrides?: CallOverrides): Promise<string>;

    pullManager(overrides?: CallOverrides): Promise<void>;

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeltaLimit(
      _delta: BigNumberish[],
      _keeper: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setOptionHandler(
      _optionHandler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setProxyManager(
      _proxyManager: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    createOrder(
      _optionSeries: Types.OptionSeriesStruct,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _isBuyBack: boolean,
      _spotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createStrangle(
      _optionSeriesCall: Types.OptionSeriesStruct,
      _optionSeriesPut: Types.OptionSeriesStruct,
      _amountCall: BigNumberish,
      _amountPut: BigNumberish,
      _priceCall: BigNumberish,
      _pricePut: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _callSpotMovementRange: [BigNumberish, BigNumberish],
      _putSpotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deltaLimit(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    optionHandler(overrides?: CallOverrides): Promise<BigNumber>;

    proxyManager(overrides?: CallOverrides): Promise<BigNumber>;

    pullManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDeltaLimit(
      _delta: BigNumberish[],
      _keeper: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOptionHandler(
      _optionHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProxyManager(
      _proxyManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createOrder(
      _optionSeries: Types.OptionSeriesStruct,
      _amount: BigNumberish,
      _price: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _isBuyBack: boolean,
      _spotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createStrangle(
      _optionSeriesCall: Types.OptionSeriesStruct,
      _optionSeriesPut: Types.OptionSeriesStruct,
      _amountCall: BigNumberish,
      _amountPut: BigNumberish,
      _priceCall: BigNumberish,
      _pricePut: BigNumberish,
      _orderExpiry: BigNumberish,
      _buyerAddress: string,
      _callSpotMovementRange: [BigNumberish, BigNumberish],
      _putSpotMovementRange: [BigNumberish, BigNumberish],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deltaLimit(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    optionHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxyManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pullManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDeltaLimit(
      _delta: BigNumberish[],
      _keeper: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOptionHandler(
      _optionHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProxyManager(
      _proxyManager: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
