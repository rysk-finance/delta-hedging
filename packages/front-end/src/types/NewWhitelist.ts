/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface NewWhitelistInterface extends utils.Interface {
  functions: {
    "addressBook()": FunctionFragment;
    "blacklistCallee(address)": FunctionFragment;
    "blacklistCollateral(address)": FunctionFragment;
    "blacklistOtoken(address)": FunctionFragment;
    "blacklistProduct(address,address,address,bool)": FunctionFragment;
    "isCoveredWhitelistedCollateral(address,address,bool)": FunctionFragment;
    "isNakedWhitelistedCollateral(address,address,bool)": FunctionFragment;
    "isWhitelistedCallee(address)": FunctionFragment;
    "isWhitelistedCollateral(address)": FunctionFragment;
    "isWhitelistedOtoken(address)": FunctionFragment;
    "isWhitelistedProduct(address,address,address,bool)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whitelistCallee(address)": FunctionFragment;
    "whitelistCollateral(address)": FunctionFragment;
    "whitelistCoveredCollateral(address,address,bool)": FunctionFragment;
    "whitelistNakedCollateral(address,address,bool)": FunctionFragment;
    "whitelistOtoken(address)": FunctionFragment;
    "whitelistProduct(address,address,address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressBook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistCallee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistOtoken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistProduct",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isCoveredWhitelistedCollateral",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isNakedWhitelistedCollateral",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedCallee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedOtoken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistedProduct",
    values: [string, string, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistCallee",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistCollateral",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistCoveredCollateral",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistNakedCollateral",
    values: [string, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistOtoken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistProduct",
    values: [string, string, string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressBook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistCallee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCoveredWhitelistedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNakedWhitelistedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedCallee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistedProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistCallee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistCoveredCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistNakedCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistOtoken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistProduct",
    data: BytesLike
  ): Result;

  events: {
    "CalleeBlacklisted(address)": EventFragment;
    "CalleeWhitelisted(address)": EventFragment;
    "CollateralBlacklisted(address)": EventFragment;
    "CollateralWhitelisted(address)": EventFragment;
    "CoveredCollateralWhitelisted(address,address,bool)": EventFragment;
    "NakedCollateralWhitelisted(address,address,bool)": EventFragment;
    "OtokenBlacklisted(address)": EventFragment;
    "OtokenWhitelisted(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProductBlacklisted(bytes32,address,address,address,bool)": EventFragment;
    "ProductWhitelisted(bytes32,address,address,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CalleeBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CalleeWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralWhitelisted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "CoveredCollateralWhitelisted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NakedCollateralWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OtokenBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OtokenWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductBlacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProductWhitelisted"): EventFragment;
}

export type CalleeBlacklistedEvent = TypedEvent<[string], { _callee: string }>;

export type CalleeBlacklistedEventFilter =
  TypedEventFilter<CalleeBlacklistedEvent>;

export type CalleeWhitelistedEvent = TypedEvent<[string], { _callee: string }>;

export type CalleeWhitelistedEventFilter =
  TypedEventFilter<CalleeWhitelistedEvent>;

export type CollateralBlacklistedEvent = TypedEvent<
  [string],
  { collateral: string }
>;

export type CollateralBlacklistedEventFilter =
  TypedEventFilter<CollateralBlacklistedEvent>;

export type CollateralWhitelistedEvent = TypedEvent<
  [string],
  { collateral: string }
>;

export type CollateralWhitelistedEventFilter =
  TypedEventFilter<CollateralWhitelistedEvent>;

export type CoveredCollateralWhitelistedEvent = TypedEvent<
  [string, string, boolean],
  { collateral: string; underlying: string; isPut: boolean }
>;

export type CoveredCollateralWhitelistedEventFilter =
  TypedEventFilter<CoveredCollateralWhitelistedEvent>;

export type NakedCollateralWhitelistedEvent = TypedEvent<
  [string, string, boolean],
  { collateral: string; underlying: string; isPut: boolean }
>;

export type NakedCollateralWhitelistedEventFilter =
  TypedEventFilter<NakedCollateralWhitelistedEvent>;

export type OtokenBlacklistedEvent = TypedEvent<[string], { otoken: string }>;

export type OtokenBlacklistedEventFilter =
  TypedEventFilter<OtokenBlacklistedEvent>;

export type OtokenWhitelistedEvent = TypedEvent<[string], { otoken: string }>;

export type OtokenWhitelistedEventFilter =
  TypedEventFilter<OtokenWhitelistedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type ProductBlacklistedEvent = TypedEvent<
  [string, string, string, string, boolean],
  {
    productHash: string;
    underlying: string;
    strike: string;
    collateral: string;
    isPut: boolean;
  }
>;

export type ProductBlacklistedEventFilter =
  TypedEventFilter<ProductBlacklistedEvent>;

export type ProductWhitelistedEvent = TypedEvent<
  [string, string, string, string, boolean],
  {
    productHash: string;
    underlying: string;
    strike: string;
    collateral: string;
    isPut: boolean;
  }
>;

export type ProductWhitelistedEventFilter =
  TypedEventFilter<ProductWhitelistedEvent>;

export interface NewWhitelist extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NewWhitelistInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressBook(overrides?: CallOverrides): Promise<[string]>;

    blacklistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blacklistCollateral(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blacklistOtoken(
      _otokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blacklistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isCoveredWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isNakedWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedCallee(
      _callee: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistCollateral(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistCoveredCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistNakedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistOtoken(
      _otokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addressBook(overrides?: CallOverrides): Promise<string>;

  blacklistCallee(
    _callee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blacklistCollateral(
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blacklistOtoken(
    _otokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blacklistProduct(
    _underlying: string,
    _strike: string,
    _collateral: string,
    _isPut: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isCoveredWhitelistedCollateral(
    _collateral: string,
    _underlying: string,
    _isPut: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isNakedWhitelistedCollateral(
    _collateral: string,
    _underlying: string,
    _isPut: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedCallee(
    _callee: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedCollateral(
    _collateral: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedOtoken(
    _otoken: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelistedProduct(
    _underlying: string,
    _strike: string,
    _collateral: string,
    _isPut: boolean,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistCallee(
    _callee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistCollateral(
    _collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistCoveredCollateral(
    _collateral: string,
    _underlying: string,
    _isPut: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistNakedCollateral(
    _collateral: string,
    _underlying: string,
    _isPut: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistOtoken(
    _otokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistProduct(
    _underlying: string,
    _strike: string,
    _collateral: string,
    _isPut: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addressBook(overrides?: CallOverrides): Promise<string>;

    blacklistCallee(_callee: string, overrides?: CallOverrides): Promise<void>;

    blacklistCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklistOtoken(
      _otokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blacklistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    isCoveredWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isNakedWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedCallee(
      _callee: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistCallee(_callee: string, overrides?: CallOverrides): Promise<void>;

    whitelistCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistCoveredCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistNakedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistOtoken(
      _otokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CalleeBlacklisted(address)"(
      _callee?: string | null
    ): CalleeBlacklistedEventFilter;
    CalleeBlacklisted(_callee?: string | null): CalleeBlacklistedEventFilter;

    "CalleeWhitelisted(address)"(
      _callee?: string | null
    ): CalleeWhitelistedEventFilter;
    CalleeWhitelisted(_callee?: string | null): CalleeWhitelistedEventFilter;

    "CollateralBlacklisted(address)"(
      collateral?: string | null
    ): CollateralBlacklistedEventFilter;
    CollateralBlacklisted(
      collateral?: string | null
    ): CollateralBlacklistedEventFilter;

    "CollateralWhitelisted(address)"(
      collateral?: string | null
    ): CollateralWhitelistedEventFilter;
    CollateralWhitelisted(
      collateral?: string | null
    ): CollateralWhitelistedEventFilter;

    "CoveredCollateralWhitelisted(address,address,bool)"(
      collateral?: string | null,
      underlying?: null,
      isPut?: null
    ): CoveredCollateralWhitelistedEventFilter;
    CoveredCollateralWhitelisted(
      collateral?: string | null,
      underlying?: null,
      isPut?: null
    ): CoveredCollateralWhitelistedEventFilter;

    "NakedCollateralWhitelisted(address,address,bool)"(
      collateral?: string | null,
      underlying?: null,
      isPut?: null
    ): NakedCollateralWhitelistedEventFilter;
    NakedCollateralWhitelisted(
      collateral?: string | null,
      underlying?: null,
      isPut?: null
    ): NakedCollateralWhitelistedEventFilter;

    "OtokenBlacklisted(address)"(
      otoken?: string | null
    ): OtokenBlacklistedEventFilter;
    OtokenBlacklisted(otoken?: string | null): OtokenBlacklistedEventFilter;

    "OtokenWhitelisted(address)"(
      otoken?: string | null
    ): OtokenWhitelistedEventFilter;
    OtokenWhitelisted(otoken?: string | null): OtokenWhitelistedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "ProductBlacklisted(bytes32,address,address,address,bool)"(
      productHash?: null,
      underlying?: string | null,
      strike?: string | null,
      collateral?: string | null,
      isPut?: null
    ): ProductBlacklistedEventFilter;
    ProductBlacklisted(
      productHash?: null,
      underlying?: string | null,
      strike?: string | null,
      collateral?: string | null,
      isPut?: null
    ): ProductBlacklistedEventFilter;

    "ProductWhitelisted(bytes32,address,address,address,bool)"(
      productHash?: null,
      underlying?: string | null,
      strike?: string | null,
      collateral?: string | null,
      isPut?: null
    ): ProductWhitelistedEventFilter;
    ProductWhitelisted(
      productHash?: null,
      underlying?: string | null,
      strike?: string | null,
      collateral?: string | null,
      isPut?: null
    ): ProductWhitelistedEventFilter;
  };

  estimateGas: {
    addressBook(overrides?: CallOverrides): Promise<BigNumber>;

    blacklistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blacklistCollateral(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blacklistOtoken(
      _otokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blacklistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isCoveredWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isNakedWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedCallee(
      _callee: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistCollateral(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistCoveredCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistNakedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistOtoken(
      _otokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressBook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blacklistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blacklistCollateral(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blacklistOtoken(
      _otokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blacklistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isCoveredWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNakedWhitelistedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedCallee(
      _callee: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedCollateral(
      _collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedOtoken(
      _otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelistedProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistCallee(
      _callee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistCollateral(
      _collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistCoveredCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistNakedCollateral(
      _collateral: string,
      _underlying: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistOtoken(
      _otokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistProduct(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
