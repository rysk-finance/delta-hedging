/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace Types {
  export type OptionStruct = {
    expiration: BigNumberish;
    strike: BigNumberish;
    isPut: boolean;
    isBuyable: boolean;
    isSellable: boolean;
  };

  export type OptionStructOutput = [
    BigNumber,
    BigNumber,
    boolean,
    boolean,
    boolean
  ] & {
    expiration: BigNumber;
    strike: BigNumber;
    isPut: boolean;
    isBuyable: boolean;
    isSellable: boolean;
  };
}

export declare namespace OptionCatalogue {
  export type OptionStoresStruct = {
    approvedOption: boolean;
    isBuyable: boolean;
    isSellable: boolean;
  };

  export type OptionStoresStructOutput = [boolean, boolean, boolean] & {
    approvedOption: boolean;
    isBuyable: boolean;
    isSellable: boolean;
  };
}

export interface OptionCatalogueInterface extends utils.Interface {
  contractName: "OptionCatalogue";
  functions: {
    "approvedOptions(bytes32)": FunctionFragment;
    "authority()": FunctionFragment;
    "changeOptionBuyOrSell((uint64,uint128,bool,bool,bool)[])": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "expirations(uint256)": FunctionFragment;
    "formatStrikePrice(uint256,address)": FunctionFragment;
    "getExpirations()": FunctionFragment;
    "getOptionDetails(uint64,bool)": FunctionFragment;
    "getOptionStores(bytes32)": FunctionFragment;
    "isBuyable(bytes32)": FunctionFragment;
    "isSellable(bytes32)": FunctionFragment;
    "issueNewSeries((uint64,uint128,bool,bool,bool)[])": FunctionFragment;
    "optionDetails(uint256,bool,uint256)": FunctionFragment;
    "optionStores(bytes32)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approvedOptions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "changeOptionBuyOrSell",
    values: [Types.OptionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expirations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "formatStrikePrice",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpirations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionDetails",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionStores",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBuyable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSellable",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueNewSeries",
    values: [Types.OptionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "optionDetails",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optionStores",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approvedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeOptionBuyOrSell",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expirations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpirations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionStores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBuyable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isSellable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issueNewSeries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "optionStores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
    "SeriesAltered(bytes32,uint64,uint128,bool,bool,bool)": EventFragment;
    "SeriesApproved(bytes32,uint64,uint128,bool,bool,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeriesAltered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeriesApproved"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export type SeriesAlteredEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, boolean, boolean],
  {
    optionHash: string;
    expiration: BigNumber;
    strike: BigNumber;
    isPut: boolean;
    isBuyable: boolean;
    isSellable: boolean;
  }
>;

export type SeriesAlteredEventFilter = TypedEventFilter<SeriesAlteredEvent>;

export type SeriesApprovedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, boolean, boolean],
  {
    optionHash: string;
    expiration: BigNumber;
    strike: BigNumber;
    isPut: boolean;
    isBuyable: boolean;
    isSellable: boolean;
  }
>;

export type SeriesApprovedEventFilter = TypedEventFilter<SeriesApprovedEvent>;

export interface OptionCatalogue extends BaseContract {
  contractName: "OptionCatalogue";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptionCatalogueInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approvedOptions(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    changeOptionBuyOrSell(
      options: Types.OptionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    expirations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    formatStrikePrice(
      strikePrice: BigNumberish,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getExpirations(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    getOptionDetails(
      expiration: BigNumberish,
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getOptionStores(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[OptionCatalogue.OptionStoresStructOutput]>;

    isBuyable(oHash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    isSellable(oHash: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    issueNewSeries(
      options: Types.OptionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    optionDetails(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    optionStores(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        approvedOption: boolean;
        isBuyable: boolean;
        isSellable: boolean;
      }
    >;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approvedOptions(
    oHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  authority(overrides?: CallOverrides): Promise<string>;

  changeOptionBuyOrSell(
    options: Types.OptionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  expirations(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  formatStrikePrice(
    strikePrice: BigNumberish,
    collateral: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getExpirations(overrides?: CallOverrides): Promise<BigNumber[]>;

  getOptionDetails(
    expiration: BigNumberish,
    isPut: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOptionStores(
    oHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<OptionCatalogue.OptionStoresStructOutput>;

  isBuyable(oHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isSellable(oHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  issueNewSeries(
    options: Types.OptionStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  optionDetails(
    arg0: BigNumberish,
    arg1: boolean,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  optionStores(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean] & {
      approvedOption: boolean;
      isBuyable: boolean;
      isSellable: boolean;
    }
  >;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approvedOptions(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authority(overrides?: CallOverrides): Promise<string>;

    changeOptionBuyOrSell(
      options: Types.OptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    expirations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formatStrikePrice(
      strikePrice: BigNumberish,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpirations(overrides?: CallOverrides): Promise<BigNumber[]>;

    getOptionDetails(
      expiration: BigNumberish,
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOptionStores(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<OptionCatalogue.OptionStoresStructOutput>;

    isBuyable(oHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isSellable(oHash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    issueNewSeries(
      options: Types.OptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    optionDetails(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionStores(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        approvedOption: boolean;
        isBuyable: boolean;
        isSellable: boolean;
      }
    >;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;

    "SeriesAltered(bytes32,uint64,uint128,bool,bool,bool)"(
      optionHash?: BytesLike | null,
      expiration?: null,
      strike?: null,
      isPut?: null,
      isBuyable?: null,
      isSellable?: null
    ): SeriesAlteredEventFilter;
    SeriesAltered(
      optionHash?: BytesLike | null,
      expiration?: null,
      strike?: null,
      isPut?: null,
      isBuyable?: null,
      isSellable?: null
    ): SeriesAlteredEventFilter;

    "SeriesApproved(bytes32,uint64,uint128,bool,bool,bool)"(
      optionHash?: BytesLike | null,
      expiration?: null,
      strike?: null,
      isPut?: null,
      isBuyable?: null,
      isSellable?: null
    ): SeriesApprovedEventFilter;
    SeriesApproved(
      optionHash?: BytesLike | null,
      expiration?: null,
      strike?: null,
      isPut?: null,
      isBuyable?: null,
      isSellable?: null
    ): SeriesApprovedEventFilter;
  };

  estimateGas: {
    approvedOptions(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    changeOptionBuyOrSell(
      options: Types.OptionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    expirations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    formatStrikePrice(
      strikePrice: BigNumberish,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExpirations(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionDetails(
      expiration: BigNumberish,
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOptionStores(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBuyable(oHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isSellable(oHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    issueNewSeries(
      options: Types.OptionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    optionDetails(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    optionStores(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approvedOptions(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeOptionBuyOrSell(
      options: Types.OptionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    expirations(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    formatStrikePrice(
      strikePrice: BigNumberish,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExpirations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOptionDetails(
      expiration: BigNumberish,
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOptionStores(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBuyable(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSellable(
      oHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueNewSeries(
      options: Types.OptionStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    optionDetails(
      arg0: BigNumberish,
      arg1: boolean,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionStores(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
