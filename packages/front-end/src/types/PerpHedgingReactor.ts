/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface PerpHedgingReactorInterface extends utils.Interface {
  functions: {
    "accountId()": FunctionFragment;
    "authority()": FunctionFragment;
    "checkVaultHealth()": FunctionFragment;
    "clearingHouse()": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "collateralId()": FunctionFragment;
    "getDelta()": FunctionFragment;
    "getPoolDenominatedValue()": FunctionFragment;
    "healthFactor()": FunctionFragment;
    "hedgeDelta(int256)": FunctionFragment;
    "initialiseReactor()": FunctionFragment;
    "internalDelta()": FunctionFragment;
    "keeper(address)": FunctionFragment;
    "parentLiquidityPool()": FunctionFragment;
    "poolId()": FunctionFragment;
    "priceFeed()": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setHealthFactor(uint256)": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setSyncOnChange(bool)": FunctionFragment;
    "sync()": FunctionFragment;
    "syncAndUpdate()": FunctionFragment;
    "syncOnChange()": FunctionFragment;
    "update()": FunctionFragment;
    "wETH()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "accountId", values?: undefined): string;
  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "checkVaultHealth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clearingHouse",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getDelta", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoolDenominatedValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "healthFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hedgeDelta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialiseReactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "internalDelta",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "parentLiquidityPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "poolId", values?: undefined): string;
  encodeFunctionData(functionFragment: "priceFeed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setHealthFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setSyncOnChange",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "sync", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "syncAndUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "syncOnChange",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "update", values?: undefined): string;
  encodeFunctionData(functionFragment: "wETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "accountId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkVaultHealth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearingHouse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolDenominatedValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hedgeDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialiseReactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "internalDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parentLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "priceFeed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHealthFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSyncOnChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "syncAndUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "syncOnChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface PerpHedgingReactor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PerpHedgingReactorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accountId(overrides?: CallOverrides): Promise<[BigNumber]>;

    authority(overrides?: CallOverrides): Promise<[string]>;

    checkVaultHealth(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        isBelowMin: boolean;
        isAboveMax: boolean;
        health: BigNumber;
        collatToTransfer: BigNumber;
      }
    >;

    clearingHouse(overrides?: CallOverrides): Promise<[string]>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    collateralId(overrides?: CallOverrides): Promise<[number]>;

    getDelta(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { delta: BigNumber }>;

    getPoolDenominatedValue(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    healthFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    hedgeDelta(
      _delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialiseReactor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    internalDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    parentLiquidityPool(overrides?: CallOverrides): Promise<[string]>;

    poolId(overrides?: CallOverrides): Promise<[number]>;

    priceFeed(overrides?: CallOverrides): Promise<[string]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHealthFactor(
      _healthFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSyncOnChange(
      _syncOnChange: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncAndUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    syncOnChange(overrides?: CallOverrides): Promise<[boolean]>;

    update(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wETH(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accountId(overrides?: CallOverrides): Promise<BigNumber>;

  authority(overrides?: CallOverrides): Promise<string>;

  checkVaultHealth(
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, BigNumber] & {
      isBelowMin: boolean;
      isAboveMax: boolean;
      health: BigNumber;
      collatToTransfer: BigNumber;
    }
  >;

  clearingHouse(overrides?: CallOverrides): Promise<string>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  collateralId(overrides?: CallOverrides): Promise<number>;

  getDelta(overrides?: CallOverrides): Promise<BigNumber>;

  getPoolDenominatedValue(overrides?: CallOverrides): Promise<BigNumber>;

  healthFactor(overrides?: CallOverrides): Promise<BigNumber>;

  hedgeDelta(
    _delta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialiseReactor(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  internalDelta(overrides?: CallOverrides): Promise<BigNumber>;

  keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  parentLiquidityPool(overrides?: CallOverrides): Promise<string>;

  poolId(overrides?: CallOverrides): Promise<number>;

  priceFeed(overrides?: CallOverrides): Promise<string>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHealthFactor(
    _healthFactor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    _auth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSyncOnChange(
    _syncOnChange: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sync(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncAndUpdate(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  syncOnChange(overrides?: CallOverrides): Promise<boolean>;

  update(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wETH(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accountId(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<string>;

    checkVaultHealth(
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, BigNumber] & {
        isBelowMin: boolean;
        isAboveMax: boolean;
        health: BigNumber;
        collatToTransfer: BigNumber;
      }
    >;

    clearingHouse(overrides?: CallOverrides): Promise<string>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    collateralId(overrides?: CallOverrides): Promise<number>;

    getDelta(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolDenominatedValue(overrides?: CallOverrides): Promise<BigNumber>;

    healthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    hedgeDelta(
      _delta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialiseReactor(overrides?: CallOverrides): Promise<void>;

    internalDelta(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    parentLiquidityPool(overrides?: CallOverrides): Promise<string>;

    poolId(overrides?: CallOverrides): Promise<number>;

    priceFeed(overrides?: CallOverrides): Promise<string>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setHealthFactor(
      _healthFactor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setSyncOnChange(
      _syncOnChange: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    sync(overrides?: CallOverrides): Promise<void>;

    syncAndUpdate(overrides?: CallOverrides): Promise<void>;

    syncOnChange(overrides?: CallOverrides): Promise<boolean>;

    update(overrides?: CallOverrides): Promise<BigNumber>;

    wETH(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;
  };

  estimateGas: {
    accountId(overrides?: CallOverrides): Promise<BigNumber>;

    authority(overrides?: CallOverrides): Promise<BigNumber>;

    checkVaultHealth(overrides?: CallOverrides): Promise<BigNumber>;

    clearingHouse(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    collateralId(overrides?: CallOverrides): Promise<BigNumber>;

    getDelta(overrides?: CallOverrides): Promise<BigNumber>;

    getPoolDenominatedValue(overrides?: CallOverrides): Promise<BigNumber>;

    healthFactor(overrides?: CallOverrides): Promise<BigNumber>;

    hedgeDelta(
      _delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialiseReactor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    internalDelta(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    parentLiquidityPool(overrides?: CallOverrides): Promise<BigNumber>;

    poolId(overrides?: CallOverrides): Promise<BigNumber>;

    priceFeed(overrides?: CallOverrides): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHealthFactor(
      _healthFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSyncOnChange(
      _syncOnChange: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncAndUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    syncOnChange(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wETH(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accountId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkVaultHealth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clearingHouse(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collateralId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPoolDenominatedValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    healthFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hedgeDelta(
      _delta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialiseReactor(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    internalDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    parentLiquidityPool(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceFeed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHealthFactor(
      _healthFactor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSyncOnChange(
      _syncOnChange: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sync(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncAndUpdate(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    syncOnChange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
