/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace UserPositionLensMK1 {
  export type VaultDrillStruct = { vaultId: BigNumberish; otoken: string };

  export type VaultDrillStructOutput = [BigNumber, string] & {
    vaultId: BigNumber;
    otoken: string;
  };
}

export interface UserPositionLensMK1Interface extends utils.Interface {
  contractName: "UserPositionLensMK1";
  functions: {
    "addressbook()": FunctionFragment;
    "getVaultsForUser(address)": FunctionFragment;
    "getVaultsForUserAndOtoken(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addressbook",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultsForUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultsForUserAndOtoken",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addressbook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultsForUserAndOtoken",
    data: BytesLike
  ): Result;

  events: {};
}

export interface UserPositionLensMK1 extends BaseContract {
  contractName: "UserPositionLensMK1";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: UserPositionLensMK1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addressbook(overrides?: CallOverrides): Promise<[string]>;

    getVaultsForUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<[UserPositionLensMK1.VaultDrillStructOutput[]]>;

    getVaultsForUserAndOtoken(
      user: string,
      otoken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  addressbook(overrides?: CallOverrides): Promise<string>;

  getVaultsForUser(
    user: string,
    overrides?: CallOverrides
  ): Promise<UserPositionLensMK1.VaultDrillStructOutput[]>;

  getVaultsForUserAndOtoken(
    user: string,
    otoken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addressbook(overrides?: CallOverrides): Promise<string>;

    getVaultsForUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<UserPositionLensMK1.VaultDrillStructOutput[]>;

    getVaultsForUserAndOtoken(
      user: string,
      otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    addressbook(overrides?: CallOverrides): Promise<BigNumber>;

    getVaultsForUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVaultsForUserAndOtoken(
      user: string,
      otoken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addressbook(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getVaultsForUser(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVaultsForUserAndOtoken(
      user: string,
      otoken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
