/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface VolatilityFeedInterface extends utils.Interface {
  functions: {
    "authority()": FunctionFragment;
    "callsVolatilitySkew(uint256)": FunctionFragment;
    "getImpliedVolatility(bool,uint256,uint256,uint256)": FunctionFragment;
    "getVolatilitySkew(bool)": FunctionFragment;
    "keeper(address)": FunctionFragment;
    "putsVolatilitySkew(uint256)": FunctionFragment;
    "setAuthority(address)": FunctionFragment;
    "setKeeper(address,bool)": FunctionFragment;
    "setVolatilitySkew(int256[7],bool)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "authority", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "callsVolatilitySkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getImpliedVolatility",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVolatilitySkew",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "keeper", values: [string]): string;
  encodeFunctionData(
    functionFragment: "putsVolatilitySkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthority",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setVolatilitySkew",
    values: [BigNumberish[], boolean]
  ): string;

  decodeFunctionResult(functionFragment: "authority", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "callsVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getImpliedVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "putsVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVolatilitySkew",
    data: BytesLike
  ): Result;

  events: {
    "AuthorityUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuthorityUpdated"): EventFragment;
}

export type AuthorityUpdatedEvent = TypedEvent<[string], { authority: string }>;

export type AuthorityUpdatedEventFilter =
  TypedEventFilter<AuthorityUpdatedEvent>;

export interface VolatilityFeed extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VolatilityFeedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    authority(overrides?: CallOverrides): Promise<[string]>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVolatilitySkew(
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVolatilitySkew(
      values: BigNumberish[],
      isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  authority(overrides?: CallOverrides): Promise<string>;

  callsVolatilitySkew(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getImpliedVolatility(
    isPut: boolean,
    underlyingPrice: BigNumberish,
    strikePrice: BigNumberish,
    expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVolatilitySkew(
    isPut: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  putsVolatilitySkew(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setAuthority(
    _newAuthority: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: string,
    _auth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVolatilitySkew(
    values: BigNumberish[],
    isPut: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    authority(overrides?: CallOverrides): Promise<string>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVolatilitySkew(
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setVolatilitySkew(
      values: BigNumberish[],
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AuthorityUpdated(address)"(authority?: null): AuthorityUpdatedEventFilter;
    AuthorityUpdated(authority?: null): AuthorityUpdatedEventFilter;
  };

  estimateGas: {
    authority(overrides?: CallOverrides): Promise<BigNumber>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVolatilitySkew(
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    keeper(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVolatilitySkew(
      values: BigNumberish[],
      isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    authority(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVolatilitySkew(
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    keeper(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAuthority(
      _newAuthority: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: string,
      _auth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVolatilitySkew(
      values: BigNumberish[],
      isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
