/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Accounting, AccountingInterface } from "../Accounting";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_liquidityPool",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "EpochNotClosed",
    type: "error",
  },
  {
    inputs: [],
    name: "ExistingWithdrawal",
    type: "error",
  },
  {
    inputs: [],
    name: "InsufficientShareBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidAmount",
    type: "error",
  },
  {
    inputs: [],
    name: "LiabilitiesGreaterThanAssets",
    type: "error",
  },
  {
    inputs: [],
    name: "NoExistingWithdrawal",
    type: "error",
  },
  {
    inputs: [],
    name: "TotalSupplyReached",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_shares",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_assetPerShare",
        type: "uint256",
      },
    ],
    name: "amountForShares",
    outputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "collateralAsset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "withdrawer",
        type: "address",
      },
    ],
    name: "completeWithdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "withdrawalAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawalShares",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "epoch",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "shares",
            type: "uint128",
          },
        ],
        internalType: "struct IAccounting.WithdrawalReceipt",
        name: "withdrawalReceipt",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "depositor",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unredeemedShares",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "totalSupply",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "assets",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "liabilities",
        type: "int256",
      },
    ],
    name: "executeEpochCalculation",
    outputs: [
      {
        internalType: "uint256",
        name: "newPricePerShareDeposit",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "newPricePerShareWithdrawal",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sharesToMint",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalWithdrawAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountNeeded",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "withdrawer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
    ],
    name: "initiateWithdraw",
    outputs: [
      {
        components: [
          {
            internalType: "uint128",
            name: "epoch",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "shares",
            type: "uint128",
          },
        ],
        internalType: "struct IAccounting.WithdrawalReceipt",
        name: "withdrawalReceipt",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "liquidityPool",
    outputs: [
      {
        internalType: "contract ILiquidityPool",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "redeemer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
    ],
    name: "redeem",
    outputs: [
      {
        internalType: "uint256",
        name: "toRedeem",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint128",
            name: "epoch",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "amount",
            type: "uint128",
          },
          {
            internalType: "uint256",
            name: "unredeemedShares",
            type: "uint256",
          },
        ],
        internalType: "struct IAccounting.DepositReceipt",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "assetPerShare",
        type: "uint256",
      },
    ],
    name: "sharesForAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "shares",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "strikeAsset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "underlyingAsset",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6101006040523480156200001257600080fd5b5060405162001994380380620019948339810160408190526200003591620001b5565b6001600160a01b0381166080819052604080516302fad37960e31b815290516317d69bc8916004808201926020929091908290030181865afa15801562000080573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000a69190620001b5565b6001600160a01b031660a0816001600160a01b031681525050806001600160a01b0316637158da7c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001249190620001b5565b6001600160a01b031660c0816001600160a01b031681525050806001600160a01b031663aabaecd66040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200017c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001a29190620001b5565b6001600160a01b031660e05250620001e7565b600060208284031215620001c857600080fd5b81516001600160a01b0381168114620001e057600080fd5b9392505050565b60805160a05160c05160e0516116da620002ba6000396000818161022301528181610508015281816105db015281816107810152611207015260006101fc0152600060b30152600081816101d5015281816102c5015281816103380152818161041701528181610671015281816106f7015281816107df015281816108ae0152818161097c01528181610a4b01528181610ae201528181610b6f01528181610c5901528181610cff01528181610dd801528181610ea901528181610f3901528181610fdb015261118501526116da6000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806355676bad1161007157806355676bad14610195578063665a11ca146101d05780637158da7c146101f7578063aabaecd61461021e578063bf3b826b14610245578063c4bf09361461026757600080fd5b806317d69bc8146100ae5780631e9a6950146100f257806332afc309146101395780634513576e1461015a57806347e7ef241461016d575b600080fd5b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101056101003660046112ae565b610287565b6040805192835281516001600160801b039081166020808601919091528301511683820152015160608201526080016100e9565b61014c6101473660046112d8565b6104ff565b6040519081526020016100e9565b61014c6101683660046112d8565b6105b7565b61018061017b3660046112ae565b61066a565b604080519283526020830191909152016100e9565b6101a86101a33660046112fa565b610a40565b604080519586526020860194909452928401919091526060830152608082015260a0016100e9565b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b6100d57f000000000000000000000000000000000000000000000000000000000000000081565b610258610253366004611326565b610c21565b6040516100e993929190611341565b61027a6102753660046112ae565b610e76565b6040516100e99190611371565b6040805160608101825260008082526020820181905291810182905260405163338cd97760e11b81526001600160a01b0385811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636719b2ee90602401606060405180830381865afa15801561030e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033291906113ac565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dc1bee0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b89190611422565b60408301518351919250906001600160801b0316158015906103e3575082516001600160801b031682115b15610498576020830151835160405163274a961360e11b81526001600160801b03918216600482015261048b9291909116907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634e952c26906024015b602060405180830381865afa158015610467573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101479190611422565b6104959082611451565b90505b8086116104a557856104a7565b805b9450846000036104c057600083945094505050506104f8565b82516001600160801b03168211156104da57600060208401525b6104e48582611469565b6001600160801b0316604084015250909150505b9250929050565b600080610590847f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105889190611480565b60ff166110ca565b9050826105a5670de0b6b3a7640000836114a3565b6105af91906114c2565b949350505050565b6000610663670de0b6b3a76400006105cf84866114a3565b6105d991906114c2565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610637573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065b9190611480565b60ff16611104565b9392505050565b60008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d2bb18e96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f19190611422565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dc1bee0d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610753573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107779190611422565b905060006107dd867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610564573d6000803e3d6000fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166367e4ac2c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f9190611422565b6108699190611451565b90508281111561088c57604051637be9badb60e01b815260040160405180910390fd5b60405163338cd97760e11b81526001600160a01b0388811660048301526000917f000000000000000000000000000000000000000000000000000000000000000090911690636719b2ee90602401606060405180830381865afa1580156108f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091b91906113ac565b604081015181519096509091506001600160801b031615801590610948575080516001600160801b031683115b156109c0576020810151815160405163274a961360e11b81526001600160801b0391821660048201526109b39291909116907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634e952c269060240161044a565b6109bd9086611451565b94505b80518796506001600160801b031683036109ef5760208101516109ec906001600160801b031687611451565b95505b6001600160801b03861115610a355760405162461bcd60e51b81526020600482015260086024820152676f766572666c6f7760c01b604482015260640160405180910390fd5b505050509250929050565b6000806000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cda2dd9a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acb9190611422565b9050610ad8898989611138565b9450849550610b687f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c074f446040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b629190611422565b876104ff565b9350610bf57f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663beca03d56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bcb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bef9190611422565b866105b7565b925082811315610c085760009150610c15565b610c1281846114e4565b91505b50939792965093509350565b60408051808201909152600080825260208201819052908190604051634b24d85160e11b81526001600160a01b0385811660048301527f00000000000000000000000000000000000000000000000000000000000000001690639649b0a2906024016040805180830381865afa158015610c9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190611523565b602081015181516001600160801b039182169450919250166000839003610cfd5760405163e3c0287b60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663802aaa5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7f9190611422565b8103610d9e576040516339c1569960e01b815260040160405180910390fd5b8282602001818151610db0919061158c565b6001600160801b0316905250604051630a67daad60e01b815260048101829052610e4b9084907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630a67daad90602401602060405180830381865afa158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101689190611422565b935083600003610e6e5760405163162908e360e11b815260040160405180910390fd5b509193909250565b6040805180820182526000808252602082015290516370a0823160e01b81526001600160a01b03848116600483015283917f0000000000000000000000000000000000000000000000000000000000000000909116906370a0823190602401602060405180830381865afa158015610ef2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f169190611422565b1015610f355760405163af4e51c760e01b815260040160405180910390fd5b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663802aaa5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fb99190611422565b604051634b24d85160e11b81526001600160a01b0386811660048301529192507f000000000000000000000000000000000000000000000000000000000000000090911690639649b0a2906024016040805180830381865afa158015611023573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110479190611523565b9150600082602001516001600160801b0316905060008284600001516001600160801b0316036110825761107b8583611451565b90506110b3565b60648211156110a45760405163029ceadb60e21b815260040160405180910390fd5b506001600160801b0382168352835b6001600160801b0316602084015250909392505050565b600060128211156110da57600080fd5b60006110e7836012611469565b90506110f481600a611698565b6105af90856114a3565b92915050565b6000601282111561111457600080fd5b6000611121836012611469565b905061112e81600a611698565b6105af90856114c2565b60008183121561115b576040516307e42e3b60e21b815260040160405180910390fd5b600061116783856114e4565b90506000851161117f57670de0b6b3a7640000611289565b846112637f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635c074f446040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112059190611422565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610564573d6000803e3d6000fd5b61126d9083611469565b61127f90670de0b6b3a76400006114a3565b61128991906114c2565b95945050505050565b80356001600160a01b03811681146112a957600080fd5b919050565b600080604083850312156112c157600080fd5b6112ca83611292565b946020939093013593505050565b600080604083850312156112eb57600080fd5b50508035926020909101359150565b60008060006060848603121561130f57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561133857600080fd5b61066382611292565b838152602080820184905282516001600160801b03908116604084015290830151166060820152608081016105af565b604081016110fe828480516001600160801b03908116835260209182015116910152565b80516001600160801b03811681146112a957600080fd5b6000606082840312156113be57600080fd5b6040516060810181811067ffffffffffffffff821117156113ef57634e487b7160e01b600052604160045260246000fd5b6040526113fb83611395565b815261140960208401611395565b6020820152604083015160408201528091505092915050565b60006020828403121561143457600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156114645761146461143b565b500190565b60008282101561147b5761147b61143b565b500390565b60006020828403121561149257600080fd5b815160ff8116811461066357600080fd5b60008160001904831182151516156114bd576114bd61143b565b500290565b6000826114df57634e487b7160e01b600052601260045260246000fd5b500490565b60008083128015600160ff1b8501841216156115025761150261143b565b6001600160ff1b038401831381161561151d5761151d61143b565b50500390565b60006040828403121561153557600080fd5b6040516040810181811067ffffffffffffffff8211171561156657634e487b7160e01b600052604160045260246000fd5b60405261157283611395565b815261158060208401611395565b60208201529392505050565b60006001600160801b03838116908316818110156115ac576115ac61143b565b039392505050565b600181815b808511156115ef5781600019048211156115d5576115d561143b565b808516156115e257918102915b93841c93908002906115b9565b509250929050565b600082611606575060016110fe565b81611613575060006110fe565b816001811461162957600281146116335761164f565b60019150506110fe565b60ff8411156116445761164461143b565b50506001821b6110fe565b5060208310610133831016604e8410600b8410161715611672575081810a6110fe565b61167c83836115b4565b80600019048211156116905761169061143b565b029392505050565b600061066383836115f756fea2646970667358221220b9fcd89780862b74524cfbad989d2ef914cf019dc9fd86e99299d174618d109864736f6c634300080e0033";

type AccountingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AccountingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Accounting__factory extends ContractFactory {
  constructor(...args: AccountingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _liquidityPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Accounting> {
    return super.deploy(_liquidityPool, overrides || {}) as Promise<Accounting>;
  }
  getDeployTransaction(
    _liquidityPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_liquidityPool, overrides || {});
  }
  attach(address: string): Accounting {
    return super.attach(address) as Accounting;
  }
  connect(signer: Signer): Accounting__factory {
    return super.connect(signer) as Accounting__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AccountingInterface {
    return new utils.Interface(_abi) as AccountingInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Accounting {
    return new Contract(address, _abi, signerOrProvider) as Accounting;
  }
}
