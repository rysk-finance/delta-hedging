/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ForceSend, ForceSendInterface } from "../ForceSend";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "victim",
        type: "address",
      },
    ],
    name: "go",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5060a28061001e6000396000f3fe608060405260043610601c5760003560e01c80633434e749146021575b600080fd5b6030602c366004603e565b6032565b005b806001600160a01b0316ff5b600060208284031215604f57600080fd5b81356001600160a01b0381168114606557600080fd5b939250505056fea2646970667358221220c3637602c0bf64aebcb86e0b27e50307758319af0d2d03be41eed77ed46c2afc64736f6c63430008090033";

type ForceSendConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ForceSendConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ForceSend__factory extends ContractFactory {
  constructor(...args: ForceSendConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ForceSend> {
    return super.deploy(overrides || {}) as Promise<ForceSend>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ForceSend {
    return super.attach(address) as ForceSend;
  }
  connect(signer: Signer): ForceSend__factory {
    return super.connect(signer) as ForceSend__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ForceSendInterface {
    return new utils.Interface(_abi) as ForceSendInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ForceSend {
    return new Contract(address, _abi, signerOrProvider) as ForceSend;
  }
}
