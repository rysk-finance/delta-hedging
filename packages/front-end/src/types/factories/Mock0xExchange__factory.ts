/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Mock0xExchange,
  Mock0xExchangeInterface,
} from "../Mock0xExchange";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct ZeroXExchangeInterface.LimitOrder[]",
        name: "_orders",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct ZeroXExchangeInterface.Signature[]",
        name: "_signatures",
        type: "tuple[]",
      },
      {
        internalType: "uint128[]",
        name: "_takerTokenFillAmounts",
        type: "uint128[]",
      },
      {
        internalType: "bool",
        name: "_revertIfIncomplete",
        type: "bool",
      },
    ],
    name: "batchFillLimitOrders",
    outputs: [
      {
        internalType: "uint128[]",
        name: "takerTokenFilledAmounts",
        type: "uint128[]",
      },
      {
        internalType: "uint128[]",
        name: "makerTokenFilledAmounts",
        type: "uint128[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "called",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "fillAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "makerToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "takerToken",
            type: "address",
          },
          {
            internalType: "uint128",
            name: "makerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerAmount",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "takerTokenFeeAmount",
            type: "uint128",
          },
          {
            internalType: "address",
            name: "maker",
            type: "address",
          },
          {
            internalType: "address",
            name: "taker",
            type: "address",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeRecipient",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "pool",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "expiry",
            type: "uint64",
          },
          {
            internalType: "uint256",
            name: "salt",
            type: "uint256",
          },
        ],
        internalType: "struct ZeroXExchangeInterface.LimitOrder",
        name: "_order",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "signatureType",
            type: "uint8",
          },
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct ZeroXExchangeInterface.Signature",
        name: "_signature",
        type: "tuple",
      },
      {
        internalType: "uint128",
        name: "_takerTokenFillAmount",
        type: "uint128",
      },
    ],
    name: "fillLimitOrder",
    outputs: [
      {
        internalType: "uint128",
        name: "takerTokenFilledAmount",
        type: "uint128",
      },
      {
        internalType: "uint128",
        name: "makerTokenFilledAmount",
        type: "uint128",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "makerAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxy",
    outputs: [
      {
        internalType: "contract Mock0xERC20Proxy",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "signature",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "takerAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805534801561001457600080fd5b5060405161002190610063565b604051809103906000f08015801561003d573d6000803e3d6000fd5b50600580546001600160a01b0319166001600160a01b0392909216919091179055610070565b61043c806108bf83390190565b6108408061007f6000396000f3fe60806040526004361061007b5760003560e01c8063acd00a5c1161004e578063acd00a5c14610103578063dddfff8714610118578063ec5568891461012d578063f6274f661461014f5761007b565b80631baaa00b146100805780632b5bd88e146100aa57806350f9b6cd146100cc57806351ff4847146100e1575b600080fd5b61009361008e366004610568565b610170565b6040516100a19291906106f3565b60405180910390f35b3480156100b657600080fd5b506100bf61020e565b6040516100a191906107a2565b3480156100d857600080fd5b506100bf610214565b3480156100ed57600080fd5b506100f661021a565b6040516100a19190610721565b34801561010f57600080fd5b506100bf6102a8565b34801561012457600080fd5b506100bf6102ae565b34801561013957600080fd5b506101426102b4565b6040516100a19190610774565b61016261015d366004610665565b6102c3565b6040516100a1929190610788565b60608060005b8651811015610204576101c387828151811061018e57fe5b60200260200101518783815181106101a257fe5b60200260200101518784815181106101b657fe5b60200260200101516102c3565b8483815181106101cf57fe5b602002602001018484815181106101e257fe5b6001600160801b03938416602091820292909201015291169052600101610176565b5094509492505050565b60015481565b60005481565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102a05780601f10610275576101008083540402835291602001916102a0565b820191906000526020600020905b81548152906001019060200180831161028357829003601f168201915b505050505081565b60045481565b60025481565b6005546001600160a01b031681565b600080935093915050565b80356001600160a01b03811681146102e557600080fd5b92915050565b600082601f8301126102fb578081fd5b813561030e610309826107d2565b6107ab565b818152915060208083019084810160808085028701830188101561033157600080fd5b60005b858110156103585761034689846104d3565b85529383019391810191600101610334565b50505050505092915050565b600082601f830112610374578081fd5b8135610382610309826107d2565b8181529150602080830190848101818402860182018710156103a357600080fd5b60005b848110156103cb5781356103b9816107f2565b845292820192908201906001016103a6565b505050505092915050565b803580151581146102e557600080fd5b60006101808083850312156103f9578182fd5b610402816107ab565b91505061040f83836102ce565b815261041e83602084016102ce565b60208201526104308360408401610528565b60408201526104428360608401610528565b60608201526104548360808401610528565b60808201526104668360a084016102ce565b60a08201526104788360c084016102ce565b60c082015261048a8360e084016102ce565b60e082015261010061049e848285016102ce565b9082015261012082810135908201526101406104bc8482850161053f565b818301525061016080830135818301525092915050565b6000608082840312156104e4578081fd5b6104ee60806107ab565b90506104fa8383610557565b81526105098360208401610557565b6020820152604082013560408201526060820135606082015292915050565b80356001600160801b03811681146102e557600080fd5b803567ffffffffffffffff811681146102e557600080fd5b803560ff811681146102e557600080fd5b6000806000806080858703121561057d578384fd5b843567ffffffffffffffff80821115610594578586fd5b81870188601f8201126105a5578687fd5b803592506105b5610309846107d2565b80848252602080830192508084016101808d83828a0288010111156105d8578b8cfd5b8b95505b87861015610604576105ee8e836103e6565b85526001959095019493820193908101906105dc565b509199508a013594505050508082111561061c578485fd5b610628888389016102eb565b9450604087013591508082111561063d578384fd5b5061064a87828801610364565b92505061065a86606087016103d6565b905092959194509250565b6000806000610220848603121561067a578283fd5b61068485856103e6565b92506106948561018086016104d3565b91506102008401356106a5816107f2565b809150509250925092565b6000815180845260208085019450808401835b838110156106e85781516001600160801b0316875295820195908201906001016106c3565b509495945050505050565b60006040825261070660408301856106b0565b828103602084015261071881856106b0565b95945050505050565b6000602080835283518082850152825b8181101561074d57858101830151858201604001528201610731565b8181111561075e5783604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0391909116815260200190565b6001600160801b0392831681529116602082015260400190565b90815260200190565b60405181810167ffffffffffffffff811182821017156107ca57600080fd5b604052919050565b600067ffffffffffffffff8211156107e8578081fd5b5060209081020190565b6001600160801b038116811461080757600080fd5b5056fea2646970667358221220ac78e21573852076da9acbdd29b46d9347eff9bd5d7ecd4bb7fa84668e88086b64736f6c634300060a0033608060405234801561001057600080fd5b5061041c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632c54de4f14610030575b600080fd5b61004361003e366004610237565b610045565b005b6100606001600160a01b03851684848463ffffffff61006616565b50505050565b610060846323b872dd60e01b858585604051602401610087939291906102ca565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152606061010e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166101569092919063ffffffff16565b805190915015610151578080602001905181019061012c9190610287565b6101515760405162461bcd60e51b815260040161014890610358565b60405180910390fd5b505050565b6060610165848460008561016d565b949350505050565b606061017885610231565b6101945760405162461bcd60e51b815260040161014890610321565b60006060866001600160a01b031685876040516101b191906102ae565b60006040518083038185875af1925050503d80600081146101ee576040519150601f19603f3d011682016040523d82523d6000602084013e6101f3565b606091505b509150915081156102075791506101659050565b8051156102175780518082602001fd5b8360405162461bcd60e51b815260040161014891906102ee565b3b151590565b6000806000806080858703121561024c578384fd5b8435610257816103ce565b93506020850135610267816103ce565b92506040850135610277816103ce565b9396929550929360600135925050565b600060208284031215610298578081fd5b815180151581146102a7578182fd5b9392505050565b600082516102c08184602087016103a2565b9190910192915050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208252825180602084015261030d8160408501602087016103a2565b601f01601f19169190910160400192915050565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b60005b838110156103bd5781810151838201526020016103a5565b838111156100605750506000910152565b6001600160a01b03811681146103e357600080fd5b5056fea2646970667358221220e859c566921470d803942fc1318b4f2f279a028947d0c6bea72e29b8e283536b64736f6c634300060a0033";

type Mock0xExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Mock0xExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Mock0xExchange__factory extends ContractFactory {
  constructor(...args: Mock0xExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Mock0xExchange> {
    return super.deploy(overrides || {}) as Promise<Mock0xExchange>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Mock0xExchange {
    return super.attach(address) as Mock0xExchange;
  }
  connect(signer: Signer): Mock0xExchange__factory {
    return super.connect(signer) as Mock0xExchange__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Mock0xExchangeInterface {
    return new utils.Interface(_abi) as Mock0xExchangeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Mock0xExchange {
    return new Contract(address, _abi, signerOrProvider) as Mock0xExchange;
  }
}
