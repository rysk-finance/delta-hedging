/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PerpHedgingTest,
  PerpHedgingTestInterface,
} from "../PerpHedgingTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "collateralAsset",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDelta",
    outputs: [
      {
        internalType: "int256",
        name: "delta",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_delta",
        type: "int256",
      },
    ],
    name: "hedgeDelta",
    outputs: [
      {
        internalType: "int256",
        name: "deltaChange",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "perpHedgingReactor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "setHedgingReactorAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "sync",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "syncAndUpdate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "update",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610540806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063bda8500711610066578063bda8500714610106578063c549176e1461010e578063f8b2cb4f14610116578063fbaac11514610129578063fff6cae91461013c57600080fd5b80632e1a7d4d14610098578063550d6d63146100be5780636cc69817146100e9578063a2e62045146100fe575b600080fd5b6100ab6100a63660046104a8565b610144565b6040519081526020015b60405180910390f35b6000546100d1906001600160a01b031681565b6040516001600160a01b0390911681526020016100b5565b6100fc6100f73660046104c1565b6101bb565b005b6100ab6101fa565b6100fc610279565b6100ab6102d4565b6100ab6101243660046104c1565b610328565b6100ab6101373660046104a8565b61036f565b6100fc6103a1565b60008054604051632e1a7d4d60e01b8152600481018490526001600160a01b0390911690632e1a7d4d906024015b6020604051808303816000875af1158015610191573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101b591906104f1565b92915050565b600080546001600160a01b0319166001600160a01b0383161790556101f773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48826000196103e5565b50565b60008060009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610250573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061027491906104f1565b905090565b600080546040805163bda8500760e01b815290516001600160a01b039092169263bda850079260048084019382900301818387803b1580156102ba57600080fd5b505af11580156102ce573d6000803e3d6000fd5b50505050565b60008060009054906101000a90046001600160a01b03166001600160a01b031663c549176e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610250573d6000803e3d6000fd5b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610191573d6000803e3d6000fd5b6000805460405163fbaac11560e01b8152600481018490526001600160a01b039091169063fbaac11590602401610172565b600080546040805160016209351760e01b0319815290516001600160a01b039092169263fff6cae99260048084019382900301818387803b1580156102ba57600080fd5b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af191505061042081610461565b6102ce5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b60003d8261047357806000803e806000fd5b806020811461048b57801561049c57600092506104a1565b816000803e600051151592506104a1565b600192505b5050919050565b6000602082840312156104ba57600080fd5b5035919050565b6000602082840312156104d357600080fd5b81356001600160a01b03811681146104ea57600080fd5b9392505050565b60006020828403121561050357600080fd5b505191905056fea264697066735822122046e273dabdc119dec5fbbb3e68a00d5c31ce3f3e43ccec60c9e9d415a141159f64736f6c634300080e0033";

type PerpHedgingTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PerpHedgingTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PerpHedgingTest__factory extends ContractFactory {
  constructor(...args: PerpHedgingTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PerpHedgingTest> {
    return super.deploy(overrides || {}) as Promise<PerpHedgingTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PerpHedgingTest {
    return super.attach(address) as PerpHedgingTest;
  }
  connect(signer: Signer): PerpHedgingTest__factory {
    return super.connect(signer) as PerpHedgingTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PerpHedgingTestInterface {
    return new utils.Interface(_abi) as PerpHedgingTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PerpHedgingTest {
    return new Contract(address, _abi, signerOrProvider) as PerpHedgingTest;
  }
}
