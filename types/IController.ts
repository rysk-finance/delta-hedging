/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type VaultStruct = {
  shortOtokens: string[];
  longOtokens: string[];
  collateralAssets: string[];
  shortAmounts: BigNumberish[];
  longAmounts: BigNumberish[];
  collateralAmounts: BigNumberish[];
};

export type VaultStructOutput = [
  string[],
  string[],
  string[],
  BigNumber[],
  BigNumber[],
  BigNumber[]
] & {
  shortOtokens: string[];
  longOtokens: string[];
  collateralAssets: string[];
  shortAmounts: BigNumber[];
  longAmounts: BigNumber[];
  collateralAmounts: BigNumber[];
};

export type ActionArgsStruct = {
  actionType: BigNumberish;
  owner: string;
  secondAddress: string;
  asset: string;
  vaultId: BigNumberish;
  amount: BigNumberish;
  index: BigNumberish;
  data: BytesLike;
};

export type ActionArgsStructOutput = [
  number,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  actionType: number;
  owner: string;
  secondAddress: string;
  asset: string;
  vaultId: BigNumber;
  amount: BigNumber;
  index: BigNumber;
  data: string;
};

export interface IControllerInterface extends utils.Interface {
  functions: {
    "getAccountVaultCounter(address)": FunctionFragment;
    "getPayout(address,uint256)": FunctionFragment;
    "getProceed(address,uint256)": FunctionFragment;
    "getVault(address,uint256)": FunctionFragment;
    "isSettlementAllowed(address,address,address,uint256)": FunctionFragment;
    "operate((uint8,address,address,address,uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "oracle()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAccountVaultCounter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPayout",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProceed",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVault",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isSettlementAllowed",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operate",
    values: [ActionArgsStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "getAccountVaultCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProceed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSettlementAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;

  events: {};
}

export interface IController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getAccountVaultCounter(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getProceed(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVault(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[VaultStructOutput]>;

    isSettlementAllowed(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    operate(
      _actions: ActionArgsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    oracle(overrides?: CallOverrides): Promise<[string]>;
  };

  getAccountVaultCounter(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPayout(
    _otoken: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getProceed(
    _owner: string,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVault(
    _owner: string,
    _vaultId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<VaultStructOutput>;

  isSettlementAllowed(
    _underlying: string,
    _strike: string,
    _collateral: string,
    _expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  operate(
    _actions: ActionArgsStruct[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  oracle(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getAccountVaultCounter(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceed(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<VaultStructOutput>;

    isSettlementAllowed(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    operate(
      _actions: ActionArgsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getAccountVaultCounter(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProceed(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVault(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isSettlementAllowed(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    operate(
      _actions: ActionArgsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getAccountVaultCounter(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayout(
      _otoken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProceed(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVault(
      _owner: string,
      _vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isSettlementAllowed(
      _underlying: string,
      _strike: string,
      _collateral: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    operate(
      _actions: ActionArgsStruct[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
