/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OptionParamsStruct = {
  minCallStrikePrice: BigNumberish;
  maxCallStrikePrice: BigNumberish;
  minPutStrikePrice: BigNumberish;
  maxPutStrikePrice: BigNumberish;
  minExpiry: BigNumberish;
  maxExpiry: BigNumberish;
};

export type OptionParamsStructOutput = [
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  minCallStrikePrice: BigNumber;
  maxCallStrikePrice: BigNumber;
  minPutStrikePrice: BigNumber;
  maxPutStrikePrice: BigNumber;
  minExpiry: BigNumber;
  maxExpiry: BigNumber;
};

export type OptionSeriesStruct = {
  expiration: BigNumberish;
  isPut: boolean;
  strike: BigNumberish;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export type OptionSeriesStructOutput = [
  BigNumber,
  boolean,
  BigNumber,
  string,
  string,
  string
] & {
  expiration: BigNumber;
  isPut: boolean;
  strike: BigNumber;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export interface LiquidityPoolInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "addBuybackAddress(address)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bidAskIVSpread()": FunctionFragment;
    "buybackOption((uint256,bool,uint256,address,address,address),uint256)": FunctionFragment;
    "buybackWhitelist(address)": FunctionFragment;
    "callsVolatilitySkew(uint256)": FunctionFragment;
    "collateralAllocated()": FunctionFragment;
    "collateralAsset()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "getImpliedVolatility(bool,uint256,uint256,uint256)": FunctionFragment;
    "getPortfolioDelta()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getVolatilitySkew(bool)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "hedgingReactors(uint256)": FunctionFragment;
    "impliedVolatility(address)": FunctionFragment;
    "issueAndWriteOption((uint256,bool,uint256,address,address,address),uint256)": FunctionFragment;
    "maxDiscount()": FunctionFragment;
    "maxTotalSupply()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "optionParams()": FunctionFragment;
    "owner()": FunctionFragment;
    "pauseContract()": FunctionFragment;
    "paused()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "protocol()": FunctionFragment;
    "putsVolatilitySkew(uint256)": FunctionFragment;
    "quotePrice((uint256,bool,uint256,address,address,address))": FunctionFragment;
    "quotePriceBuying((uint256,bool,uint256,address,address,address),uint256)": FunctionFragment;
    "quotePriceGreeks((uint256,bool,uint256,address,address,address),bool)": FunctionFragment;
    "quotePriceWithUtilization((uint256,bool,uint256,address,address,address),uint256)": FunctionFragment;
    "quotePriceWithUtilizationGreeks((uint256,bool,uint256,address,address,address),uint256)": FunctionFragment;
    "rebalancePortfolioDelta(int256,uint256)": FunctionFragment;
    "removeHedgingReactorAddress(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "riskFreeRate()": FunctionFragment;
    "setBidAskSpread(uint256)": FunctionFragment;
    "setCachedOptionsVariables(uint256,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "setHedgingReactorAddress(address)": FunctionFragment;
    "setMaxCallStrikePrice(uint128)": FunctionFragment;
    "setMaxDiscount(uint256)": FunctionFragment;
    "setMaxExpiryPeriod(uint128)": FunctionFragment;
    "setMaxPutStrikePrice(uint128)": FunctionFragment;
    "setMaxTotalSupply(uint256)": FunctionFragment;
    "setMinCallStrikePrice(uint128)": FunctionFragment;
    "setMinExpiryPeriod(uint128)": FunctionFragment;
    "setMinPutStrikePrice(uint128)": FunctionFragment;
    "setNewOptionParams(uint128,uint128,uint128,uint128,uint128,uint128)": FunctionFragment;
    "setVolatilitySkew(int256[7],bool)": FunctionFragment;
    "strikeAsset()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalAmountCall()": FunctionFragment;
    "totalAmountPut()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "underlyingAllocated()": FunctionFragment;
    "underlyingAsset()": FunctionFragment;
    "unpause()": FunctionFragment;
    "weightedStrikeCall()": FunctionFragment;
    "weightedStrikePut()": FunctionFragment;
    "weightedTimeCall()": FunctionFragment;
    "weightedTimePut()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "writeOption(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addBuybackAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bidAskIVSpread",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buybackOption",
    values: [OptionSeriesStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buybackWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "callsVolatilitySkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getImpliedVolatility",
    values: [boolean, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPortfolioDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVolatilitySkew",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hedgingReactors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "impliedVolatility",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "issueAndWriteOption",
    values: [OptionSeriesStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDiscount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "optionParams",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "protocol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "putsVolatilitySkew",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePrice",
    values: [OptionSeriesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePriceBuying",
    values: [OptionSeriesStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePriceGreeks",
    values: [OptionSeriesStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePriceWithUtilization",
    values: [OptionSeriesStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quotePriceWithUtilizationGreeks",
    values: [OptionSeriesStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalancePortfolioDelta",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeHedgingReactorAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "riskFreeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBidAskSpread",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setCachedOptionsVariables",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setHedgingReactorAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCallStrikePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxDiscount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxExpiryPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPutStrikePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinCallStrikePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinExpiryPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPutStrikePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewOptionParams",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setVolatilitySkew",
    values: [BigNumberish[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "strikeAsset",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAmountCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalAmountPut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAllocated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingAsset",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weightedStrikeCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightedStrikePut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightedTimeCall",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "weightedTimePut",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "writeOption",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBuybackAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bidAskIVSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buybackOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buybackWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "callsVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collateralAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getImpliedVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPortfolioDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hedgingReactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "impliedVolatility",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueAndWriteOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "putsVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quotePrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quotePriceBuying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePriceGreeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePriceWithUtilization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quotePriceWithUtilizationGreeks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalancePortfolioDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeHedgingReactorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "riskFreeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBidAskSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCachedOptionsVariables",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHedgingReactorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxCallStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPutStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinCallStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinExpiryPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPutStrikePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNewOptionParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVolatilitySkew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strikeAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalAmountPut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAllocated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "underlyingAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weightedStrikeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightedStrikePut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightedTimeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "weightedTimePut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "writeOption",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BuybackOption(address,uint256,uint256,uint256,address)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "ImpliedVolatilityUpdated(address,uint256)": EventFragment;
    "LiquidityAdded(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "UnderlyingAdded(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
    "WriteOption(address,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BuybackOption"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ImpliedVolatilityUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnderlyingAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WriteOption"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; amount: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BuybackOptionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  {
    series: string;
    amount: BigNumber;
    premium: BigNumber;
    escrowReturned: BigNumber;
    seller: string;
  }
>;

export type BuybackOptionEventFilter = TypedEventFilter<BuybackOptionEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; strikeAmount: BigNumber; shares: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type ImpliedVolatilityUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { underlying: string; iv: BigNumber }
>;

export type ImpliedVolatilityUpdatedEventFilter = TypedEventFilter<ImpliedVolatilityUpdatedEvent>;

export type LiquidityAddedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; amount: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type UnderlyingAddedEvent = TypedEvent<[string], { underlying: string }>;

export type UnderlyingAddedEventFilter = TypedEventFilter<UnderlyingAddedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { recipient: string; shares: BigNumber; strikeAmount: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WriteOptionEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string],
  {
    series: string;
    amount: BigNumber;
    premium: BigNumber;
    escrow: BigNumber;
    buyer: string;
  }
>;

export type WriteOptionEventFilter = TypedEventFilter<WriteOptionEvent>;

export interface LiquidityPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    addBuybackAddress(
      _addressToWhitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    bidAskIVSpread(overrides?: CallOverrides): Promise<[BigNumber]>;

    buybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buybackWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collateralAllocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    collateralAsset(overrides?: CallOverrides): Promise<[string]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPortfolioDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getVolatilitySkew(
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hedgingReactors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    impliedVolatility(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    issueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maxDiscount(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    optionParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        minCallStrikePrice: BigNumber;
        maxCallStrikePrice: BigNumber;
        minPutStrikePrice: BigNumber;
        maxPutStrikePrice: BigNumber;
        minExpiry: BigNumber;
        maxExpiry: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocol(overrides?: CallOverrides): Promise<[string]>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quotePrice(
      optionSeries: OptionSeriesStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quotePriceBuying(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>;

    quotePriceGreeks(
      optionSeries: OptionSeriesStruct,
      isBuying: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        quote: BigNumber;
        delta: BigNumber;
        underlyingPrice: BigNumber;
      }
    >;

    quotePriceWithUtilization(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>;

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeHedgingReactorAddress(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    riskFreeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBidAskSpread(
      _bidAskSpread: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCachedOptionsVariables(
      _totalAmountCall: BigNumberish,
      _totalAmountPut: BigNumberish,
      _weightedStrikeCall: BigNumberish,
      _weightedTimeCall: BigNumberish,
      _weightedStrikePut: BigNumberish,
      _weightedTimePut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHedgingReactorAddress(
      _reactorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxCallStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxDiscount(
      _maxDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxExpiryPeriod(
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPutStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinCallStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinExpiryPeriod(
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPutStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewOptionParams(
      _newMinCallStrike: BigNumberish,
      _newMaxCallStrike: BigNumberish,
      _newMinPutStrike: BigNumberish,
      _newMaxPutStrike: BigNumberish,
      _newMinExpiry: BigNumberish,
      _newMaxExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVolatilitySkew(
      values: BigNumberish[],
      isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    strikeAsset(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalAmountCall(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalAmountPut(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    underlyingAllocated(overrides?: CallOverrides): Promise<[BigNumber]>;

    underlyingAsset(overrides?: CallOverrides): Promise<[string]>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weightedStrikeCall(overrides?: CallOverrides): Promise<[BigNumber]>;

    weightedStrikePut(overrides?: CallOverrides): Promise<[BigNumber]>;

    weightedTimeCall(overrides?: CallOverrides): Promise<[BigNumber]>;

    weightedTimePut(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      _shares: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    writeOption(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  addBuybackAddress(
    _addressToWhitelist: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  bidAskIVSpread(overrides?: CallOverrides): Promise<BigNumber>;

  buybackOption(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buybackWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callsVolatilitySkew(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collateralAllocated(overrides?: CallOverrides): Promise<BigNumber>;

  collateralAsset(overrides?: CallOverrides): Promise<string>;

  decimals(overrides?: CallOverrides): Promise<number>;

  deposit(
    _amount: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getImpliedVolatility(
    isPut: boolean,
    underlyingPrice: BigNumberish,
    strikePrice: BigNumberish,
    expiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPortfolioDelta(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getVolatilitySkew(
    isPut: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  hedgingReactors(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  impliedVolatility(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  issueAndWriteOption(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maxDiscount(overrides?: CallOverrides): Promise<BigNumber>;

  maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  optionParams(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      minCallStrikePrice: BigNumber;
      maxCallStrikePrice: BigNumber;
      minPutStrikePrice: BigNumber;
      maxPutStrikePrice: BigNumber;
      minExpiry: BigNumber;
      maxExpiry: BigNumber;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pauseContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocol(overrides?: CallOverrides): Promise<string>;

  putsVolatilitySkew(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quotePrice(
    optionSeries: OptionSeriesStruct,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quotePriceBuying(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>;

  quotePriceGreeks(
    optionSeries: OptionSeriesStruct,
    isBuying: boolean,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      quote: BigNumber;
      delta: BigNumber;
      underlyingPrice: BigNumber;
    }
  >;

  quotePriceWithUtilization(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quotePriceWithUtilizationGreeks(
    optionSeries: OptionSeriesStruct,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>;

  rebalancePortfolioDelta(
    delta: BigNumberish,
    reactorIndex: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeHedgingReactorAddress(
    _index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>;

  setBidAskSpread(
    _bidAskSpread: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCachedOptionsVariables(
    _totalAmountCall: BigNumberish,
    _totalAmountPut: BigNumberish,
    _weightedStrikeCall: BigNumberish,
    _weightedTimeCall: BigNumberish,
    _weightedStrikePut: BigNumberish,
    _weightedTimePut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHedgingReactorAddress(
    _reactorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxCallStrikePrice(
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxDiscount(
    _maxDiscount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxExpiryPeriod(
    _newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPutStrikePrice(
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxTotalSupply(
    _maxTotalSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinCallStrikePrice(
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinExpiryPeriod(
    _newPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPutStrikePrice(
    _newPrice: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewOptionParams(
    _newMinCallStrike: BigNumberish,
    _newMaxCallStrike: BigNumberish,
    _newMinPutStrike: BigNumberish,
    _newMaxPutStrike: BigNumberish,
    _newMinExpiry: BigNumberish,
    _newMaxExpiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVolatilitySkew(
    values: BigNumberish[],
    isPut: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  strikeAsset(overrides?: CallOverrides): Promise<string>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalAmountCall(overrides?: CallOverrides): Promise<BigNumber>;

  totalAmountPut(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  underlyingAllocated(overrides?: CallOverrides): Promise<BigNumber>;

  underlyingAsset(overrides?: CallOverrides): Promise<string>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weightedStrikeCall(overrides?: CallOverrides): Promise<BigNumber>;

  weightedStrikePut(overrides?: CallOverrides): Promise<BigNumber>;

  weightedTimeCall(overrides?: CallOverrides): Promise<BigNumber>;

  weightedTimePut(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    _shares: BigNumberish,
    _recipient: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  writeOption(
    seriesAddress: string,
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    addBuybackAddress(
      _addressToWhitelist: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bidAskIVSpread(overrides?: CallOverrides): Promise<BigNumber>;

    buybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buybackWhitelist(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<string>;

    decimals(overrides?: CallOverrides): Promise<number>;

    deposit(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPortfolioDelta(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getVolatilitySkew(
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hedgingReactors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    impliedVolatility(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string] & { optionAmount: BigNumber; series: string }
    >;

    maxDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    optionParams(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        minCallStrikePrice: BigNumber;
        maxCallStrikePrice: BigNumber;
        minPutStrikePrice: BigNumber;
        maxPutStrikePrice: BigNumber;
        minExpiry: BigNumber;
        maxExpiry: BigNumber;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pauseContract(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    protocol(overrides?: CallOverrides): Promise<string>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePrice(
      optionSeries: OptionSeriesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceBuying(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>;

    quotePriceGreeks(
      optionSeries: OptionSeriesStruct,
      isBuying: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        quote: BigNumber;
        delta: BigNumber;
        underlyingPrice: BigNumber;
      }
    >;

    quotePriceWithUtilization(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { quote: BigNumber; delta: BigNumber }>;

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    removeHedgingReactorAddress(
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>;

    setBidAskSpread(
      _bidAskSpread: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setCachedOptionsVariables(
      _totalAmountCall: BigNumberish,
      _totalAmountPut: BigNumberish,
      _weightedStrikeCall: BigNumberish,
      _weightedTimeCall: BigNumberish,
      _weightedStrikePut: BigNumberish,
      _weightedTimePut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setHedgingReactorAddress(
      _reactorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCallStrikePrice(
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxDiscount(
      _maxDiscount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxExpiryPeriod(
      _newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxPutStrikePrice(
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxTotalSupply(
      _maxTotalSupply: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinCallStrikePrice(
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinExpiryPeriod(
      _newPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPutStrikePrice(
      _newPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewOptionParams(
      _newMinCallStrike: BigNumberish,
      _newMaxCallStrike: BigNumberish,
      _newMinPutStrike: BigNumberish,
      _newMaxPutStrike: BigNumberish,
      _newMinExpiry: BigNumberish,
      _newMaxExpiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVolatilitySkew(
      values: BigNumberish[],
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<boolean>;

    strikeAsset(overrides?: CallOverrides): Promise<string>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalAmountCall(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountPut(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<string>;

    unpause(overrides?: CallOverrides): Promise<void>;

    weightedStrikeCall(overrides?: CallOverrides): Promise<BigNumber>;

    weightedStrikePut(overrides?: CallOverrides): Promise<BigNumber>;

    weightedTimeCall(overrides?: CallOverrides): Promise<BigNumber>;

    weightedTimePut(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _shares: BigNumberish,
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    writeOption(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      amount?: null
    ): ApprovalEventFilter;

    "BuybackOption(address,uint256,uint256,uint256,address)"(
      series?: null,
      amount?: null,
      premium?: null,
      escrowReturned?: null,
      seller?: null
    ): BuybackOptionEventFilter;
    BuybackOption(
      series?: null,
      amount?: null,
      premium?: null,
      escrowReturned?: null,
      seller?: null
    ): BuybackOptionEventFilter;

    "Deposit(address,uint256,uint256)"(
      recipient?: null,
      strikeAmount?: null,
      shares?: null
    ): DepositEventFilter;
    Deposit(
      recipient?: null,
      strikeAmount?: null,
      shares?: null
    ): DepositEventFilter;

    "ImpliedVolatilityUpdated(address,uint256)"(
      underlying?: null,
      iv?: null
    ): ImpliedVolatilityUpdatedEventFilter;
    ImpliedVolatilityUpdated(
      underlying?: null,
      iv?: null
    ): ImpliedVolatilityUpdatedEventFilter;

    "LiquidityAdded(uint256)"(amount?: null): LiquidityAddedEventFilter;
    LiquidityAdded(amount?: null): LiquidityAddedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): RoleRevokedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      amount?: null
    ): TransferEventFilter;

    "UnderlyingAdded(address)"(underlying?: null): UnderlyingAddedEventFilter;
    UnderlyingAdded(underlying?: null): UnderlyingAddedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdraw(address,uint256,uint256)"(
      recipient?: null,
      shares?: null,
      strikeAmount?: null
    ): WithdrawEventFilter;
    Withdraw(
      recipient?: null,
      shares?: null,
      strikeAmount?: null
    ): WithdrawEventFilter;

    "WriteOption(address,uint256,uint256,uint256,address)"(
      series?: null,
      amount?: null,
      premium?: null,
      escrow?: null,
      buyer?: null
    ): WriteOptionEventFilter;
    WriteOption(
      series?: null,
      amount?: null,
      premium?: null,
      escrow?: null,
      buyer?: null
    ): WriteOptionEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    addBuybackAddress(
      _addressToWhitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    bidAskIVSpread(overrides?: CallOverrides): Promise<BigNumber>;

    buybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buybackWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collateralAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    collateralAsset(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPortfolioDelta(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVolatilitySkew(
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hedgingReactors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    impliedVolatility(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maxDiscount(overrides?: CallOverrides): Promise<BigNumber>;

    maxTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    optionParams(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocol(overrides?: CallOverrides): Promise<BigNumber>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePrice(
      optionSeries: OptionSeriesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceBuying(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceGreeks(
      optionSeries: OptionSeriesStruct,
      isBuying: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceWithUtilization(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeHedgingReactorAddress(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    riskFreeRate(overrides?: CallOverrides): Promise<BigNumber>;

    setBidAskSpread(
      _bidAskSpread: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCachedOptionsVariables(
      _totalAmountCall: BigNumberish,
      _totalAmountPut: BigNumberish,
      _weightedStrikeCall: BigNumberish,
      _weightedTimeCall: BigNumberish,
      _weightedStrikePut: BigNumberish,
      _weightedTimePut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHedgingReactorAddress(
      _reactorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxCallStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxDiscount(
      _maxDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxExpiryPeriod(
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPutStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxTotalSupply(
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinCallStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinExpiryPeriod(
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPutStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewOptionParams(
      _newMinCallStrike: BigNumberish,
      _newMaxCallStrike: BigNumberish,
      _newMinPutStrike: BigNumberish,
      _newMaxPutStrike: BigNumberish,
      _newMinExpiry: BigNumberish,
      _newMaxExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVolatilitySkew(
      values: BigNumberish[],
      isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    strikeAsset(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountCall(overrides?: CallOverrides): Promise<BigNumber>;

    totalAmountPut(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    underlyingAllocated(overrides?: CallOverrides): Promise<BigNumber>;

    underlyingAsset(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weightedStrikeCall(overrides?: CallOverrides): Promise<BigNumber>;

    weightedStrikePut(overrides?: CallOverrides): Promise<BigNumber>;

    weightedTimeCall(overrides?: CallOverrides): Promise<BigNumber>;

    weightedTimePut(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _shares: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    writeOption(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addBuybackAddress(
      _addressToWhitelist: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bidAskIVSpread(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buybackOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buybackWhitelist(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    callsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAllocated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collateralAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getImpliedVolatility(
      isPut: boolean,
      underlyingPrice: BigNumberish,
      strikePrice: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPortfolioDelta(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVolatilitySkew(
      isPut: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hedgingReactors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    impliedVolatility(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issueAndWriteOption(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maxDiscount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxTotalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    optionParams(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauseContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    putsVolatilitySkew(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePrice(
      optionSeries: OptionSeriesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePriceBuying(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePriceGreeks(
      optionSeries: OptionSeriesStruct,
      isBuying: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePriceWithUtilization(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quotePriceWithUtilizationGreeks(
      optionSeries: OptionSeriesStruct,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rebalancePortfolioDelta(
      delta: BigNumberish,
      reactorIndex: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeHedgingReactorAddress(
      _index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    riskFreeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBidAskSpread(
      _bidAskSpread: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCachedOptionsVariables(
      _totalAmountCall: BigNumberish,
      _totalAmountPut: BigNumberish,
      _weightedStrikeCall: BigNumberish,
      _weightedTimeCall: BigNumberish,
      _weightedStrikePut: BigNumberish,
      _weightedTimePut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHedgingReactorAddress(
      _reactorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCallStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxDiscount(
      _maxDiscount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxExpiryPeriod(
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPutStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxTotalSupply(
      _maxTotalSupply: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinCallStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinExpiryPeriod(
      _newPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPutStrikePrice(
      _newPrice: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewOptionParams(
      _newMinCallStrike: BigNumberish,
      _newMaxCallStrike: BigNumberish,
      _newMinPutStrike: BigNumberish,
      _newMaxPutStrike: BigNumberish,
      _newMinExpiry: BigNumberish,
      _newMaxExpiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVolatilitySkew(
      values: BigNumberish[],
      isPut: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    strikeAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmountCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalAmountPut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    underlyingAllocated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    underlyingAsset(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weightedStrikeCall(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightedStrikePut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weightedTimeCall(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weightedTimePut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _shares: BigNumberish,
      _recipient: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    writeOption(
      seriesAddress: string,
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
