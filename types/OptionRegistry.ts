/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type OptionSeriesStruct = {
  expiration: BigNumberish;
  isPut: boolean;
  strike: BigNumberish;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export type OptionSeriesStructOutput = [
  BigNumber,
  boolean,
  BigNumber,
  string,
  string,
  string
] & {
  expiration: BigNumber;
  isPut: boolean;
  strike: BigNumber;
  underlying: string;
  strikeAsset: string;
  collateral: string;
};

export interface OptionRegistryInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "close(address,uint256)": FunctionFragment;
    "getIssuanceHash((uint256,bool,uint256,address,address,address))": FunctionFragment;
    "getSeriesAddress(bytes32)": FunctionFragment;
    "getSeriesInfo(address)": FunctionFragment;
    "issue(address,address,uint256,bool,uint256,address)": FunctionFragment;
    "open(address,uint256)": FunctionFragment;
    "openInterest(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "redeem(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "seriesInfo(address)": FunctionFragment;
    "setLiquidityPool(address)": FunctionFragment;
    "settle(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vaultIds(address)": FunctionFragment;
    "writers(address,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIssuanceHash",
    values: [OptionSeriesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeriesAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSeriesInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [string, string, BigNumberish, boolean, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "openInterest",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "redeem", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "seriesInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLiquidityPool",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "settle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vaultIds", values: [string]): string;
  encodeFunctionData(
    functionFragment: "writers",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getIssuanceHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeriesAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSeriesInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "openInterest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "seriesInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vaultIds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "writers", data: BytesLike): Result;

  events: {
    "OptionTokenCreated(address)": EventFragment;
    "OptionsContractClosed(address,uint256,uint256)": EventFragment;
    "OptionsContractOpened(address,uint256,uint256)": EventFragment;
    "OptionsContractSettled(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SeriesRedeemed(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OptionTokenCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptionsContractClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptionsContractOpened"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OptionsContractSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SeriesRedeemed"): EventFragment;
}

export type OptionTokenCreatedEvent = TypedEvent<[string], { token: string }>;

export type OptionTokenCreatedEventFilter = TypedEventFilter<OptionTokenCreatedEvent>;

export type OptionsContractClosedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { series: string; vaultId: BigNumber; closedAmount: BigNumber }
>;

export type OptionsContractClosedEventFilter = TypedEventFilter<OptionsContractClosedEvent>;

export type OptionsContractOpenedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { series: string; vaultId: BigNumber; optionsAmount: BigNumber }
>;

export type OptionsContractOpenedEventFilter = TypedEventFilter<OptionsContractOpenedEvent>;

export type OptionsContractSettledEvent = TypedEvent<
  [string],
  { series: string }
>;

export type OptionsContractSettledEventFilter = TypedEventFilter<OptionsContractSettledEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type SeriesRedeemedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { series: string; underlyingAmount: BigNumber; strikeAmount: BigNumber }
>;

export type SeriesRedeemedEventFilter = TypedEventFilter<SeriesRedeemedEvent>;

export interface OptionRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OptionRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    close(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getIssuanceHash(
      _series: OptionSeriesStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSeriesAddress(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getSeriesInfo(
      series: string,
      overrides?: CallOverrides
    ): Promise<[OptionSeriesStructOutput]>;

    issue(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      isPut: boolean,
      strike: BigNumberish,
      collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    open(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    openInterest(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    redeem(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seriesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, string, string, string] & {
        expiration: BigNumber;
        isPut: boolean;
        strike: BigNumber;
        underlying: string;
        strikeAsset: string;
        collateral: string;
      }
    >;

    setLiquidityPool(
      _newLiquidityPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaultIds(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    writers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  close(
    _series: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getIssuanceHash(
    _series: OptionSeriesStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getSeriesAddress(
    issuanceHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getSeriesInfo(
    series: string,
    overrides?: CallOverrides
  ): Promise<OptionSeriesStructOutput>;

  issue(
    underlying: string,
    strikeAsset: string,
    expiration: BigNumberish,
    isPut: boolean,
    strike: BigNumberish,
    collateral: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  open(
    _series: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  openInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  redeem(
    _series: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seriesInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, BigNumber, string, string, string] & {
      expiration: BigNumber;
      isPut: boolean;
      strike: BigNumber;
      underlying: string;
      strikeAsset: string;
      collateral: string;
    }
  >;

  setLiquidityPool(
    _newLiquidityPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    _series: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaultIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  writers(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    close(
      _series: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    getIssuanceHash(
      _series: OptionSeriesStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getSeriesAddress(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getSeriesInfo(
      series: string,
      overrides?: CallOverrides
    ): Promise<OptionSeriesStructOutput>;

    issue(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      isPut: boolean,
      strike: BigNumberish,
      collateral: string,
      overrides?: CallOverrides
    ): Promise<string>;

    open(
      _series: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, BigNumber]>;

    openInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    redeem(_series: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    seriesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, BigNumber, string, string, string] & {
        expiration: BigNumber;
        isPut: boolean;
        strike: BigNumber;
        underlying: string;
        strikeAsset: string;
        collateral: string;
      }
    >;

    setLiquidityPool(
      _newLiquidityPool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    settle(_series: string, overrides?: CallOverrides): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vaultIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    writers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "OptionTokenCreated(address)"(token?: null): OptionTokenCreatedEventFilter;
    OptionTokenCreated(token?: null): OptionTokenCreatedEventFilter;

    "OptionsContractClosed(address,uint256,uint256)"(
      series?: string | null,
      vaultId?: null,
      closedAmount?: null
    ): OptionsContractClosedEventFilter;
    OptionsContractClosed(
      series?: string | null,
      vaultId?: null,
      closedAmount?: null
    ): OptionsContractClosedEventFilter;

    "OptionsContractOpened(address,uint256,uint256)"(
      series?: string | null,
      vaultId?: null,
      optionsAmount?: null
    ): OptionsContractOpenedEventFilter;
    OptionsContractOpened(
      series?: string | null,
      vaultId?: null,
      optionsAmount?: null
    ): OptionsContractOpenedEventFilter;

    "OptionsContractSettled(address)"(
      series?: string | null
    ): OptionsContractSettledEventFilter;
    OptionsContractSettled(
      series?: string | null
    ): OptionsContractSettledEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SeriesRedeemed(address,uint256,uint256)"(
      series?: null,
      underlyingAmount?: null,
      strikeAmount?: null
    ): SeriesRedeemedEventFilter;
    SeriesRedeemed(
      series?: null,
      underlyingAmount?: null,
      strikeAmount?: null
    ): SeriesRedeemedEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    close(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getIssuanceHash(
      _series: OptionSeriesStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeriesAddress(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSeriesInfo(
      series: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    issue(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      isPut: boolean,
      strike: BigNumberish,
      collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    open(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    openInterest(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    redeem(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seriesInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setLiquidityPool(
      _newLiquidityPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaultIds(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    writers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    close(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getIssuanceHash(
      _series: OptionSeriesStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeriesAddress(
      issuanceHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSeriesInfo(
      series: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    issue(
      underlying: string,
      strikeAsset: string,
      expiration: BigNumberish,
      isPut: boolean,
      strike: BigNumberish,
      collateral: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    open(
      _series: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    openInterest(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeem(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seriesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setLiquidityPool(
      _newLiquidityPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      _series: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaultIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    writers(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
