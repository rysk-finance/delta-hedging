/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockChainlinkAggregator,
  MockChainlinkAggregatorInterface,
} from "../MockChainlinkAggregator";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "startedAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "updatedAt",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "answeredInRound",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "setLatestAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256",
      },
      {
        internalType: "int256",
        name: "_answer",
        type: "int256",
      },
    ],
    name: "setRoundAnswer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_roundId",
        type: "uint256",
      },
    ],
    name: "setRoundTimestamp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052600860005534801561001557600080fd5b50610263806100256000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806304ea97b0146100675780631ef4026b1461008657806326b17a08146100a3578063313ce567146100c65780639a6fc8f5146100e0578063feaf968c14610148575b600080fd5b6100846004803603602081101561007d57600080fd5b5035610150565b005b6100846004803603602081101561009c57600080fd5b5035610155565b610084600480360360408110156100b957600080fd5b5080359060200135610168565b6100ce61017a565b60408051918252519081900360200190f35b610109600480360360208110156100f657600080fd5b503569ffffffffffffffffffff16610180565b6040805169ffffffffffffffffffff96871681526020810195909552848101939093526060840191909152909216608082015290519081900360a00190f35b61010961021f565b600355565b6000908152600160205260409020429055565b60009182526002602052604090912055565b60005481565b69ffffffffffffffffffff811660009081526001602052604081205481908190819081906101e7576040805162461bcd60e51b815260206004820152600f60248201526e139bc819185d18481c1c995cd95b9d608a1b604482015290519081900360640190fd5b5050505069ffffffffffffffffffff821660009081526002602090815260408083205460019092529091205492939092915081908490565b60035460019142908190849056fea2646970667358221220855936e663f00c320c1e7a93a953e52f9ac93c1897e83ca6b8acacbe0bf8f24464736f6c634300060a0033";

type MockChainlinkAggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockChainlinkAggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockChainlinkAggregator__factory extends ContractFactory {
  constructor(...args: MockChainlinkAggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockChainlinkAggregator> {
    return super.deploy(overrides || {}) as Promise<MockChainlinkAggregator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockChainlinkAggregator {
    return super.attach(address) as MockChainlinkAggregator;
  }
  connect(signer: Signer): MockChainlinkAggregator__factory {
    return super.connect(signer) as MockChainlinkAggregator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockChainlinkAggregatorInterface {
    return new utils.Interface(_abi) as MockChainlinkAggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockChainlinkAggregator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockChainlinkAggregator;
  }
}
