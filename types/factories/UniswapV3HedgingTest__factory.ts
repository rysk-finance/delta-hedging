/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapV3HedgingTest,
  UniswapV3HedgingTestInterface,
} from "../UniswapV3HedgingTest";

const _abi = [
  {
    inputs: [],
    name: "getDelta",
    outputs: [
      {
        internalType: "int256",
        name: "delta",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "_delta",
        type: "int256",
      },
    ],
    name: "hedgeDelta",
    outputs: [
      {
        internalType: "int256",
        name: "deltaChange",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "setHedgingReactorAddress",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapV3HedgingReactor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "update",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506104c4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100615760003560e01c8062f714ce14610066578063203df58b1461008c5780636cc69817146100b7578063a2e62045146100cc578063c549176e146100d4578063fbaac115146100dc575b600080fd5b610079610074366004610415565b6100ef565b6040519081526020015b60405180910390f35b60005461009f906001600160a01b031681565b6040516001600160a01b039091168152602001610083565b6100ca6100c5366004610441565b61017b565b005b6100796101ba565b610079610248565b6100796100ea36600461045c565b6102ab565b60008054604051627b8a6760e11b8152600481018590526001600160a01b0384811660248301529091169062f714ce90604401602060405180830381600087803b15801561013c57600080fd5b505af1158015610150573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101749190610475565b9392505050565b600080546001600160a01b0319166001600160a01b0383161790556101b773a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4882600019610330565b50565b60008060009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561020b57600080fd5b505af115801561021f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102439190610475565b905090565b60008060009054906101000a90046001600160a01b03166001600160a01b031663c549176e6040518163ffffffff1660e01b815260040160206040518083038186803b15801561029757600080fd5b505afa15801561021f573d6000803e3d6000fd5b6000805460405163fbaac11560e01b8152600481018490526001600160a01b039091169063fbaac11590602401602060405180830381600087803b1580156102f257600080fd5b505af1158015610306573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032a9190610475565b92915050565b600060405163095ea7b360e01b81526001600160a01b03841660048201528260248201526000806044836000895af191505061036b816103b2565b6103ac5760405162461bcd60e51b815260206004820152600e60248201526d1054141493d59157d1905253115160921b604482015260640160405180910390fd5b50505050565b60003d826103c457806000803e806000fd5b80602081146103dc5780156103ed57600092506103f2565b816000803e600051151592506103f2565b600192505b5050919050565b80356001600160a01b038116811461041057600080fd5b919050565b6000806040838503121561042857600080fd5b82359150610438602084016103f9565b90509250929050565b60006020828403121561045357600080fd5b610174826103f9565b60006020828403121561046e57600080fd5b5035919050565b60006020828403121561048757600080fd5b505191905056fea2646970667358221220ad31f47cf48a3dcb182250f6a9c028e5af81e5bf40395ae877c7d4fe8f0f5c8d64736f6c63430008090033";

type UniswapV3HedgingTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapV3HedgingTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapV3HedgingTest__factory extends ContractFactory {
  constructor(...args: UniswapV3HedgingTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapV3HedgingTest> {
    return super.deploy(overrides || {}) as Promise<UniswapV3HedgingTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UniswapV3HedgingTest {
    return super.attach(address) as UniswapV3HedgingTest;
  }
  connect(signer: Signer): UniswapV3HedgingTest__factory {
    return super.connect(signer) as UniswapV3HedgingTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapV3HedgingTestInterface {
    return new utils.Interface(_abi) as UniswapV3HedgingTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapV3HedgingTest {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as UniswapV3HedgingTest;
  }
}
